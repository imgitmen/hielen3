{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"HIELEN Hielen (HIerarchical ELaboration ENgine) \u00e8 una suite di api REST dedicata alla rappresentazione e alla gestione delle evoluzioni temporali di fenomeni dotati di caratteristiche spaziali. Essa \u00e8 stata modellata sulle esigenze del monitoraggio strutturale, ambientale e geognostico, con l'obiettivo di astrarre lo strato fisico degli acquisitori installati sul campo e fornire un ambiente omogeneo per l'analisi dei dati relativi all'evoluzione dei fenomeni monitorati. Note generali sulle API 1. Costruzione della URL In questo documento si far\u00e0 riferimento alle specifiche api in questo modo: PROTOCOLLO /{nomeapi} intendendo con questa scrittura il protocollo da utilizzare per la chiamata (vedi punto 2) e il punto d'ingresso della specifica api che dovr\u00e0 essere utlizzato nella url , accodandolo allo hostname e all' endpoint specifici. es.: supponedo hostname = www.hostname.com endopoint = api/hielen nomeapi = features la costruzione della url sar\u00e0 la seguente www.hostname.com/api/hielen/features dove la parte www.hostname.com/api/hielen sar\u00e0 il punto d'ingresso per tutte le api della specifica installazione e dipender\u00e0 esclusivamente dalla configurazione del webserver che ospita la suite 2. Utilizzo dei potocolli standard HTTP Le API seguno le direttive REST e dunque ognuna di esse sfrutta i diversi protocolli http per svolgere azioni differenti. In generale: POST per la creazione di un nuovo elemento GET per il recupero di informazioni di uno o pi\u00f9 elementi PUT per la modifica di un elemento DELETE per l'eliminazione di un elemento ad esempio POST www.hostname.com/api/hielen/features?... potr\u00e0 essere utilizzato per creare un elemento di tipo feature. mentre GET www.hostname.com/api/hielen/features/uuid_feature servir\u00e0 a recuperare le informazioni della feature individuata da uuid_feature 3. Risposta standard delle API Dove non diversamente specificato, le api rispondono con un json in questo formato: { \"meta\": { \"response\": ..., \"message\": ..., \"data_type\": ..., }, \"data\": ... } dove: il campo meta contine informazioni relative all'esecuzione della richiesta . il sottocampo response pu\u00f2 assumere i valori error oppure ok . il sottocampo message contiene l'eventuale messaggio di errore. il sottocampo data_type contiene la marcatura dell'api richiesta (es.: \"GET /api/hielen/features\"). il campo data contiene la risposta prodotta dall'esecuzione, generalmente un json, se essa \u00e8 andata a buon fine. Struttura generale delle API Protocollo Nome API Descrizione GET /prototypes informazioni sulle tipologie di feature implementate GET /actionschemata schemi di base per agire sulle features POST /features creazione di una nuova feature GET /features recupero di informazioni sulle features PUT /features modifica di una feature DELETE /features eliminazione di una feature POST /actions azione specifica su una featrue GET /actions recupero di informazioni sull'azione eseguita su una feature PUT /actions modifica di un'azione precedentemente eseguita su una feature DELETE /actions eliminazione di un'azione precedemente eseguita su una feature GET /query interfaccia di interrogazione dei dati","title":"Home"},{"location":"#hielen","text":"Hielen (HIerarchical ELaboration ENgine) \u00e8 una suite di api REST dedicata alla rappresentazione e alla gestione delle evoluzioni temporali di fenomeni dotati di caratteristiche spaziali. Essa \u00e8 stata modellata sulle esigenze del monitoraggio strutturale, ambientale e geognostico, con l'obiettivo di astrarre lo strato fisico degli acquisitori installati sul campo e fornire un ambiente omogeneo per l'analisi dei dati relativi all'evoluzione dei fenomeni monitorati.","title":"HIELEN"},{"location":"#note-generali-sulle-api","text":"","title":"Note generali sulle API"},{"location":"#1-costruzione-della-url","text":"In questo documento si far\u00e0 riferimento alle specifiche api in questo modo: PROTOCOLLO /{nomeapi} intendendo con questa scrittura il protocollo da utilizzare per la chiamata (vedi punto 2) e il punto d'ingresso della specifica api che dovr\u00e0 essere utlizzato nella url , accodandolo allo hostname e all' endpoint specifici. es.: supponedo hostname = www.hostname.com endopoint = api/hielen nomeapi = features la costruzione della url sar\u00e0 la seguente www.hostname.com/api/hielen/features dove la parte www.hostname.com/api/hielen sar\u00e0 il punto d'ingresso per tutte le api della specifica installazione e dipender\u00e0 esclusivamente dalla configurazione del webserver che ospita la suite","title":"1. Costruzione della URL"},{"location":"#2-utilizzo-dei-potocolli-standard-http","text":"Le API seguno le direttive REST e dunque ognuna di esse sfrutta i diversi protocolli http per svolgere azioni differenti. In generale: POST per la creazione di un nuovo elemento GET per il recupero di informazioni di uno o pi\u00f9 elementi PUT per la modifica di un elemento DELETE per l'eliminazione di un elemento ad esempio POST www.hostname.com/api/hielen/features?... potr\u00e0 essere utilizzato per creare un elemento di tipo feature. mentre GET www.hostname.com/api/hielen/features/uuid_feature servir\u00e0 a recuperare le informazioni della feature individuata da uuid_feature","title":"2.  Utilizzo dei potocolli standard HTTP"},{"location":"#3-risposta-standard-delle-api","text":"Dove non diversamente specificato, le api rispondono con un json in questo formato: { \"meta\": { \"response\": ..., \"message\": ..., \"data_type\": ..., }, \"data\": ... } dove: il campo meta contine informazioni relative all'esecuzione della richiesta . il sottocampo response pu\u00f2 assumere i valori error oppure ok . il sottocampo message contiene l'eventuale messaggio di errore. il sottocampo data_type contiene la marcatura dell'api richiesta (es.: \"GET /api/hielen/features\"). il campo data contiene la risposta prodotta dall'esecuzione, generalmente un json, se essa \u00e8 andata a buon fine.","title":"3.  Risposta standard delle API"},{"location":"#struttura-generale-delle-api","text":"Protocollo Nome API Descrizione GET /prototypes informazioni sulle tipologie di feature implementate GET /actionschemata schemi di base per agire sulle features POST /features creazione di una nuova feature GET /features recupero di informazioni sulle features PUT /features modifica di una feature DELETE /features eliminazione di una feature POST /actions azione specifica su una featrue GET /actions recupero di informazioni sull'azione eseguita su una feature PUT /actions modifica di un'azione precedentemente eseguita su una feature DELETE /actions eliminazione di un'azione precedemente eseguita su una feature GET /query interfaccia di interrogazione dei dati","title":"Struttura generale delle API"},{"location":"CHANGELOG/","text":"CHANGELOG v3.0.3 modifica api POST /feature/ : non prende pi\u00f9 il parametro \"uid\" . Il campo \"uid\" della feature viene ora generato dalla chiamata, secondo gli standard di \"uuid\". modifica definizione della classe hielen3.api.feature.FeaturePropertiesSchema : rinominato il campo \"context\" in \"milieu\" . Questo coinvolge la chiamata API POST /feature/ in quanto la classe modificata gestisce e valida il json da passare al parametro properies dell'API. modifica api POST,GET,PUT,DELETE /feature/ : rinominato il parametro \"cntxt\" in \"milieu\" . La parola \"milieu\" al contrario di \"context\" non d\u00e0 problemi di interpretazione al sottostante strato di \"Hug\" (per questo motivo era stata utilizzata \"cntxt\"). In questo modo vengono uniformati i parmametri di queste API con il campo della classe di gestione delle properties.","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"","title":"CHANGELOG"},{"location":"CHANGELOG/#v303","text":"modifica api POST /feature/ : non prende pi\u00f9 il parametro \"uid\" . Il campo \"uid\" della feature viene ora generato dalla chiamata, secondo gli standard di \"uuid\". modifica definizione della classe hielen3.api.feature.FeaturePropertiesSchema : rinominato il campo \"context\" in \"milieu\" . Questo coinvolge la chiamata API POST /feature/ in quanto la classe modificata gestisce e valida il json da passare al parametro properies dell'API. modifica api POST,GET,PUT,DELETE /feature/ : rinominato il parametro \"cntxt\" in \"milieu\" . La parola \"milieu\" al contrario di \"context\" non d\u00e0 problemi di interpretazione al sottostante strato di \"Hug\" (per questo motivo era stata utilizzata \"cntxt\"). In questo modo vengono uniformati i parmametri di queste API con il campo della classe di gestione delle properties.","title":"v3.0.3"},{"location":"MODELLO/","text":"Con Priorit\u00e0 Structure gestore della configurazione di base: modulo utilizzo stato datalink.py livello di astrazione db, interfacce json completo, integrabile utils.py strumenti accessori completo, integrabile source.py astrazione dei moduli di gestione completo, integrabile modello db: tabella descrizione stato features_proto prototipi features info sui moduli completa features persistenza delle features completa actions persistenza delle azioni completa series_proto prototipi serie dati per configurazione dinamica implementazione series peristenza info di elaborazione serie dati avanzato series_cache persistenza serie dati elaborate runtime json utilizzato per mockup modello api: Configurazione Abstraction layer: Produzione Interrogazione First Header Second Header Content from cell 1 Content from cell 2 Content in the first column Content in the second column Configurazione hielen2.ext.PhotoMonitoring (netCDF) definizione array dimensionali X,Y: 1- creo gli array di dimensione adeguata, 2- applico la matrice di trasformazione affine, 3- applico la proiezione da crs in input a EPSG:3857 salvare file in filecache/{uid}/multidim.nc (dati) definire percorso di salvataggio tiles: filecache/{uid}/{map}/ (tiles mappe) salvare il primo tile a risoluzione adeguata: filecache/{uid}/{map}/base.png salvataggio (stoccaggio) dell'immagine di base in filecache/{uid} (eventualmente compressa) Feed hielen2.ext.PhotoMonitoring analisi dei file csv in ingresso (NS, EW, Correlation se esiste) aggirnamento di filecache/{uid}/multidim.nc Configurazione hielen2.ext.TinSAR analisi della formato della master cloud salvataggio (stoccaggio) della nuvola di base recupero info geografiche in caso non esistano info di proiezione geografica si considera spazio cartesiano con coordinate con adeguate alla nuvola base (da verificare) configurare file netCDF e salvarlo in filecache/{uid}/multidim.nc (dati) definire percorso di salvataggio tiles: filecache/{uid}/{map}/ (tiles mappe) configurare cartella di cache per potree filecache/{uid}/{cloud} (potree) Feed hielen2.ext.TinSAR Analisi file in ingresso aggiornamento filecache/{uid}/multidim.nc aggiornamento filecache/{uid}/{cloud} v2.0.6 Interfacce delle Informazioni con risposta mockup. Intento: agganciare lavoro Daniele GET /bases GET /bases/{feature} GET /timelines GET /timelines/{feature} GET /data/ estensione del modello di datamap per accettare GeoGeson v2.0.7 Rivistazione del modulo PhotMonitoring come \"source\". Intento: agganciare le serie dati prodotte dall'elaborazione Photmonitoring alle interfacce v2.0.8 Implementazione del modulo TinSar come \"source\". Intento: agganciare le serie dati prodotte dall'elaborazione TinSar alle interfacce v2.0.9 Implementazione delle chiamate di mappa GET /maps/[/z/x/y] GET /maps/{feature}/[z/x/y] v2.0.10 Implementazione chiamate cloud GET /cloud/{feature} Senza priorit\u00e0 Moduli HielenSource : attualmente, per comodit\u00e0, vengono sviluppati come sotto moduli di hielen2 ma il modo corretto \u00e8 quello di separare lo sviluppo. Sar\u00e0 sempre possibile farlo dal momento che le strutture vengono sviluppate con l'obiettivo della separazione. ~~ Moduli HielenSource : Definire in backend le form come Marshmallow.Schema in modo da condividere la struttura tra moduli e api~~ Obiettivo: assegnare una timestamp ad ogni informazione: le properties degli ogetti dovranno essere delle serie dati. Concetto di informazione minima. Implementare procedura di testing delle api verificare il default dei campi marshmallow (sembra non prenderlo in considerazione, prob non arriva null ma \"\") POST /prototypes Migliorare l'output dei doc del JsonValidable Gestire i filed Nested nei doc del JsonValidable","title":"MODELLO"},{"location":"MODELLO/#con-priorita","text":"","title":"Con Priorit\u00e0"},{"location":"MODELLO/#structure","text":"gestore della configurazione di base: modulo utilizzo stato datalink.py livello di astrazione db, interfacce json completo, integrabile utils.py strumenti accessori completo, integrabile source.py astrazione dei moduli di gestione completo, integrabile modello db: tabella descrizione stato features_proto prototipi features info sui moduli completa features persistenza delle features completa actions persistenza delle azioni completa series_proto prototipi serie dati per configurazione dinamica implementazione series peristenza info di elaborazione serie dati avanzato series_cache persistenza serie dati elaborate runtime json utilizzato per mockup modello api:","title":"Structure"},{"location":"MODELLO/#configurazione","text":"Abstraction layer:","title":"Configurazione"},{"location":"MODELLO/#produzione","text":"","title":"Produzione"},{"location":"MODELLO/#interrogazione","text":"First Header Second Header Content from cell 1 Content from cell 2 Content in the first column Content in the second column","title":"Interrogazione"},{"location":"MODELLO/#configurazione-hielen2extphotomonitoring-netcdf","text":"definizione array dimensionali X,Y: 1- creo gli array di dimensione adeguata, 2- applico la matrice di trasformazione affine, 3- applico la proiezione da crs in input a EPSG:3857 salvare file in filecache/{uid}/multidim.nc (dati) definire percorso di salvataggio tiles: filecache/{uid}/{map}/ (tiles mappe) salvare il primo tile a risoluzione adeguata: filecache/{uid}/{map}/base.png salvataggio (stoccaggio) dell'immagine di base in filecache/{uid} (eventualmente compressa)","title":"Configurazione hielen2.ext.PhotoMonitoring (netCDF)"},{"location":"MODELLO/#feed-hielen2extphotomonitoring","text":"analisi dei file csv in ingresso (NS, EW, Correlation se esiste) aggirnamento di filecache/{uid}/multidim.nc","title":"Feed hielen2.ext.PhotoMonitoring"},{"location":"MODELLO/#configurazione-hielen2exttinsar","text":"analisi della formato della master cloud salvataggio (stoccaggio) della nuvola di base recupero info geografiche in caso non esistano info di proiezione geografica si considera spazio cartesiano con coordinate con adeguate alla nuvola base (da verificare) configurare file netCDF e salvarlo in filecache/{uid}/multidim.nc (dati) definire percorso di salvataggio tiles: filecache/{uid}/{map}/ (tiles mappe) configurare cartella di cache per potree filecache/{uid}/{cloud} (potree)","title":"Configurazione hielen2.ext.TinSAR"},{"location":"MODELLO/#feed-hielen2exttinsar","text":"Analisi file in ingresso aggiornamento filecache/{uid}/multidim.nc aggiornamento filecache/{uid}/{cloud}","title":"Feed hielen2.ext.TinSAR"},{"location":"MODELLO/#v206-interfacce-delle-informazioni-con-risposta-mockup-intento-agganciare-lavoro-daniele","text":"GET /bases GET /bases/{feature} GET /timelines GET /timelines/{feature} GET /data/ estensione del modello di datamap per accettare GeoGeson","title":"v2.0.6 Interfacce delle Informazioni con risposta mockup. Intento: agganciare lavoro Daniele"},{"location":"MODELLO/#v207-rivistazione-del-modulo-photmonitoring-come-source-intento-agganciare-le-serie-dati-prodotte-dallelaborazione-photmonitoring-alle-interfacce","text":"","title":"v2.0.7 Rivistazione del modulo PhotMonitoring come \"source\". Intento: agganciare le serie dati prodotte dall'elaborazione Photmonitoring alle interfacce"},{"location":"MODELLO/#v208-implementazione-del-modulo-tinsar-come-source-intento-agganciare-le-serie-dati-prodotte-dallelaborazione-tinsar-alle-interfacce","text":"","title":"v2.0.8 Implementazione del modulo TinSar come \"source\". Intento: agganciare le serie dati prodotte dall'elaborazione TinSar alle interfacce"},{"location":"MODELLO/#v209-implementazione-delle-chiamate-di-mappa","text":"GET /maps/[/z/x/y] GET /maps/{feature}/[z/x/y]","title":"v2.0.9 Implementazione delle chiamate di mappa"},{"location":"MODELLO/#v2010-implementazione-chiamate-cloud","text":"GET /cloud/{feature}","title":"v2.0.10 Implementazione chiamate cloud"},{"location":"MODELLO/#senza-priorita","text":"Moduli HielenSource : attualmente, per comodit\u00e0, vengono sviluppati come sotto moduli di hielen2 ma il modo corretto \u00e8 quello di separare lo sviluppo. Sar\u00e0 sempre possibile farlo dal momento che le strutture vengono sviluppate con l'obiettivo della separazione. ~~ Moduli HielenSource : Definire in backend le form come Marshmallow.Schema in modo da condividere la struttura tra moduli e api~~ Obiettivo: assegnare una timestamp ad ogni informazione: le properties degli ogetti dovranno essere delle serie dati. Concetto di informazione minima. Implementare procedura di testing delle api verificare il default dei campi marshmallow (sembra non prenderlo in considerazione, prob non arriva null ma \"\") POST /prototypes Migliorare l'output dei doc del JsonValidable Gestire i filed Nested nei doc del JsonValidable","title":"Senza priorit\u00e0"},{"location":"TODO/","text":"MODULO PRICIPALE: Documentazione API online Giorni/Uomo effettivi Priorit\u00e0 Complessit\u00e0 Copertura Attivit\u00e0 xx alta bassa completo Start-up sistema di documentazione xx alta bassa alta Sistemazione documentazione online.","title":"TODO"},{"location":"TODO/#modulo-pricipale","text":"","title":"MODULO PRICIPALE:"},{"location":"TODO/#documentazione-api-online","text":"Giorni/Uomo effettivi Priorit\u00e0 Complessit\u00e0 Copertura Attivit\u00e0 xx alta bassa completo Start-up sistema di documentazione xx alta bassa alta Sistemazione documentazione online.","title":"Documentazione API online"},{"location":"docs/API%20Reference/actions/","text":"Actions GET /actions/{feature} params : feature : Basic text / string value actions : Basic text / string value timestamp : Basic text / string value result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 usage : Recupero dello stato corrente delle azioni effettuate su una feature L'intento di questa api \u00e8 quello di fornire i valori richiesti secondo lo schema dell'azione nota 1 : actions accetta valori multipli separati da virgola nota 2 : A seconda dell'action richiesta, alcuni parametri potrebbero essere utilizzati in fase di input ma non registrati. Il che vuol dire che per quei parametri il valore di ritorno sar\u00e0 null viene restituito una struttura di questo tipo: [ { \"feature\"*:..., \"action_name*\":..., \"timestamp\": ..., \"value\":{...} }, { \"feature\"*:..., \"action_name*\":..., \"timestamp\": ..., \"value\":{...} }, ... ] nota 3 :(*) I campi \"feature\" e \"action\" potrebbero non essere restituiti nella struttura nel caso in cui essi risultino non ambigui. \"timestamp\" e \"value\" vengono sempre restituiti Possibili risposte: 404 Not Found : Nel non venga trovata la feature richiesta o essa abbia un problema di configurazione GET /actions/{feature}/{action} params : feature : Basic text / string value action : Basic text / string value timestamp : Basic text / string value result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 usage : **Recupero dello stato corrente per una specifica azione di una specifica feature** DELETE /actions/{feature}/{action} params : feature : Basic text / string value action : Basic text / string value timestamp : Basic text / string value result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 usage : **Eliminazione di una determinata azione di una specifica feature** POST /actions/{feature}/{action} params : feature : Basic text / string value action : Basic text / string value result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 usage : Esecuzione delle azioni Richiede l'esecuzione di una specifica azione su una feature, fornendo tutte le informazioni necessarie attraverso una form dinamica dedicata. Oltre ai due parametri feature e form , timestamp , indicati nella url, accetta un multipart/form-data basato sulla specifica form, selezionata tramite i due parametri espliciti. Tutto il content \u00e8 scaricato attarverso i chunk dello stream ('100 continue') per evitare il timeout dei workers in caso di contenuti di grandi dimensioni. Possibili risposte: 200 OK : Nel caso in cui l'azione vada a buon fine. L'azione richiesta viene presa in carico ma potrebbe avere un tempo di esecuzione arbitrario. L'azione quindi viene splittata su un altro processo. 404 Not Found : Nel caso la feature non esista o non sia definita per essa l'azione richiesta. 500 Internal Server Error : Nel caso pessimo che il modulo dichiarato non esista. 501 Not Implemented' : Nel caso la tipologia non fornisse ancora l'iplementazione di uno o tutti i moduli di gestione E' stato implementato il meccanismo minimo di gestione che prevede il salvataggio delle info fornite che possono essere fornite tali e quali in uscita (vedi metodo GET dell'api). Questo meccanismo permette di svluppare i moduli a partire da un template con risposta di default. PUT /actions/{feature}/{action} params : feature : Basic text / string value action : Basic text / string value result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 usage : Esecuzione delle azioni Richiede l'esecuzione di una specifica azione su una feature, fornendo tutte le informazioni necessarie attraverso una form dinamica dedicata. Oltre ai due parametri feature e form , timestamp , indicati nella url, accetta un multipart/form-data basato sulla specifica form, selezionata tramite i due parametri espliciti. Tutto il content \u00e8 scaricato attarverso i chunk dello stream ('100 continue') per evitare il timeout dei workers in caso di contenuti di grandi dimensioni. Possibili risposte: 200 OK : Nel caso in cui l'azione vada a buon fine. L'azione richiesta viene presa in carico ma potrebbe avere un tempo di esecuzione arbitrario. L'azione quindi viene splittata su un altro processo. 404 Not Found : Nel caso la feature non esista o non sia definita per essa l'azione richiesta. 500 Internal Server Error : Nel caso pessimo che il modulo dichiarato non esista. 501 Not Implemented' : Nel caso la tipologia non fornisse ancora l'iplementazione di uno o tutti i moduli di gestione E' stato implementato il meccanismo minimo di gestione che prevede il salvataggio delle info fornite che possono essere fornite tali e quali in uscita (vedi metodo GET dell'api). Questo meccanismo permette di svluppare i moduli a partire da un template con risposta di default.","title":"Actions"},{"location":"docs/API%20Reference/actions/#actions","text":"","title":"Actions"},{"location":"docs/API%20Reference/actions/#get-actionsfeature","text":"params : feature : Basic text / string value actions : Basic text / string value timestamp : Basic text / string value result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 usage : Recupero dello stato corrente delle azioni effettuate su una feature L'intento di questa api \u00e8 quello di fornire i valori richiesti secondo lo schema dell'azione nota 1 : actions accetta valori multipli separati da virgola nota 2 : A seconda dell'action richiesta, alcuni parametri potrebbero essere utilizzati in fase di input ma non registrati. Il che vuol dire che per quei parametri il valore di ritorno sar\u00e0 null viene restituito una struttura di questo tipo: [ { \"feature\"*:..., \"action_name*\":..., \"timestamp\": ..., \"value\":{...} }, { \"feature\"*:..., \"action_name*\":..., \"timestamp\": ..., \"value\":{...} }, ... ] nota 3 :(*) I campi \"feature\" e \"action\" potrebbero non essere restituiti nella struttura nel caso in cui essi risultino non ambigui. \"timestamp\" e \"value\" vengono sempre restituiti Possibili risposte: 404 Not Found : Nel non venga trovata la feature richiesta o essa abbia un problema di configurazione","title":"GET    /actions/{feature}"},{"location":"docs/API%20Reference/actions/#get-actionsfeatureaction","text":"params : feature : Basic text / string value action : Basic text / string value timestamp : Basic text / string value result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 usage : **Recupero dello stato corrente per una specifica azione di una specifica feature**","title":"GET    /actions/{feature}/{action}"},{"location":"docs/API%20Reference/actions/#delete-actionsfeatureaction","text":"params : feature : Basic text / string value action : Basic text / string value timestamp : Basic text / string value result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 usage : **Eliminazione di una determinata azione di una specifica feature**","title":"DELETE /actions/{feature}/{action}"},{"location":"docs/API%20Reference/actions/#post-actionsfeatureaction","text":"params : feature : Basic text / string value action : Basic text / string value result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 usage : Esecuzione delle azioni Richiede l'esecuzione di una specifica azione su una feature, fornendo tutte le informazioni necessarie attraverso una form dinamica dedicata. Oltre ai due parametri feature e form , timestamp , indicati nella url, accetta un multipart/form-data basato sulla specifica form, selezionata tramite i due parametri espliciti. Tutto il content \u00e8 scaricato attarverso i chunk dello stream ('100 continue') per evitare il timeout dei workers in caso di contenuti di grandi dimensioni. Possibili risposte: 200 OK : Nel caso in cui l'azione vada a buon fine. L'azione richiesta viene presa in carico ma potrebbe avere un tempo di esecuzione arbitrario. L'azione quindi viene splittata su un altro processo. 404 Not Found : Nel caso la feature non esista o non sia definita per essa l'azione richiesta. 500 Internal Server Error : Nel caso pessimo che il modulo dichiarato non esista. 501 Not Implemented' : Nel caso la tipologia non fornisse ancora l'iplementazione di uno o tutti i moduli di gestione E' stato implementato il meccanismo minimo di gestione che prevede il salvataggio delle info fornite che possono essere fornite tali e quali in uscita (vedi metodo GET dell'api). Questo meccanismo permette di svluppare i moduli a partire da un template con risposta di default.","title":"POST   /actions/{feature}/{action}"},{"location":"docs/API%20Reference/actions/#put-actionsfeatureaction","text":"params : feature : Basic text / string value action : Basic text / string value result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 usage : Esecuzione delle azioni Richiede l'esecuzione di una specifica azione su una feature, fornendo tutte le informazioni necessarie attraverso una form dinamica dedicata. Oltre ai due parametri feature e form , timestamp , indicati nella url, accetta un multipart/form-data basato sulla specifica form, selezionata tramite i due parametri espliciti. Tutto il content \u00e8 scaricato attarverso i chunk dello stream ('100 continue') per evitare il timeout dei workers in caso di contenuti di grandi dimensioni. Possibili risposte: 200 OK : Nel caso in cui l'azione vada a buon fine. L'azione richiesta viene presa in carico ma potrebbe avere un tempo di esecuzione arbitrario. L'azione quindi viene splittata su un altro processo. 404 Not Found : Nel caso la feature non esista o non sia definita per essa l'azione richiesta. 500 Internal Server Error : Nel caso pessimo che il modulo dichiarato non esista. 501 Not Implemented' : Nel caso la tipologia non fornisse ancora l'iplementazione di uno o tutti i moduli di gestione E' stato implementato il meccanismo minimo di gestione che prevede il salvataggio delle info fornite che possono essere fornite tali e quali in uscita (vedi metodo GET dell'api). Questo meccanismo permette di svluppare i moduli a partire da un template con risposta di default.","title":"PUT    /actions/{feature}/{action}"},{"location":"docs/API%20Reference/actionschemata/","text":"Actionschemata GET /actionschemata/ params : prototypes : Basic text / string value actions : Basic text / string value result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 usage : Recupero dello schema dei parametri per inizializare le forms delle azioni ritorna una struttura json di questo tipo: { \"NomePrototipo1\": { \"action1\": { \"args\": { \"arg1.1\": \"type_arg1.1\", \"arg1.2\": \"type_arg1.2\", ... }, \"mandatory\": [ args keys sublist ] }, \"action2\": { \"args\": { \"arg2.1\": \"type_arg2.1\", \"arg2.2\": \"type_arg2.2\", ... }, }, ... }, \"NomePrototipo3\": { ... }, ... }, GET /actionschemata/{prototype} params : prototype : Basic text / string value actions : Basic text / string value result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 usage : Alias per il recupero di tutte le informazioni di uno specifico prototipo GET /actionschemata/{prototype}/{action} params : prototype : Basic text / string value action : Basic text / string value result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 usage : Alias per il recupero di tutte le informazioni delle form di uno specifico prototipo","title":"ActionSchemata"},{"location":"docs/API%20Reference/actionschemata/#actionschemata","text":"","title":"Actionschemata"},{"location":"docs/API%20Reference/actionschemata/#get-actionschemata","text":"params : prototypes : Basic text / string value actions : Basic text / string value result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 usage : Recupero dello schema dei parametri per inizializare le forms delle azioni ritorna una struttura json di questo tipo: { \"NomePrototipo1\": { \"action1\": { \"args\": { \"arg1.1\": \"type_arg1.1\", \"arg1.2\": \"type_arg1.2\", ... }, \"mandatory\": [ args keys sublist ] }, \"action2\": { \"args\": { \"arg2.1\": \"type_arg2.1\", \"arg2.2\": \"type_arg2.2\", ... }, }, ... }, \"NomePrototipo3\": { ... }, ... },","title":"GET    /actionschemata/"},{"location":"docs/API%20Reference/actionschemata/#get-actionschemataprototype","text":"params : prototype : Basic text / string value actions : Basic text / string value result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 usage : Alias per il recupero di tutte le informazioni di uno specifico prototipo","title":"GET    /actionschemata/{prototype}"},{"location":"docs/API%20Reference/actionschemata/#get-actionschemataprototypeaction","text":"params : prototype : Basic text / string value action : Basic text / string value result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 usage : Alias per il recupero di tutte le informazioni delle form di uno specifico prototipo","title":"GET    /actionschemata/{prototype}/{action}"},{"location":"docs/API%20Reference/features/","text":"Features POST /features/ params : prototype : Basic text / string value properties : JSON Schema { style : str|bytes, description : str|bytes, status : str|bytes, timestamp : str|bytes, milieu : str|bytes, label : str|bytes, location : str|bytes} geometry : JSON Schema {} result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 usage : DESCRIZIONE: Creazione delle Features. Ogni feature viene creata sulla il suo il suo prototipo prototype ed in fase di creazione viene creato il campo uid . Questi due campi sono immutabli. Vedi PUT feature PARAMETRI: prototype : Definisce il tipo della feature e accetta uno dei valori recuperabili attraverso l'API GET prototype properties : Json dei campi anagrafici della feature, utilizzati dal sistema. Nessuno di essi \u00e8 obbligatorio. Lo schema \u00e8 il seguente: { \"milieu\": \"Stringa: gruppo in cui inserire la feature\", \"label\": \"Stringa: etichetta mnemonica della feature\", \"description\": \"Stringa: descrizione della feature\", \"location\": \"Stringa: descrizione mnemonica della posizioni\", \"style\": \"Stringa: informazioni per le direttive csv\", \"status\": \"Stringa: informaizoni di stato\", \"timestamp\": \"Stringa: data di creazione della feature nel formato YYYY-MM-DD HH:MM:SS\" } geometry : Accetta un GeoJson OUTPUT: Se la feature viene creata correttamente la sua struttura viene restituita all'interno del campo data del json di risposta standard RESPONSE CODES: 409 Conflict : Nel caso in cui il uid fornito esista gi\u00e0. 404 Not Found : Nel caso in cui il prototipo richiesto non esista. 201 Created : Nel caso in cui la feature venga creata correttamente. GET /features/ params : uids : Basic text / string value milieu : Basic text / string value info : Basic text / string value result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 usage : DESCRIZIONE: Recupero delle informazioni delle features. PARAMETRI: uids : Lista \"comma separated\" degli id delle features da recuperare. Nel caso in cui non venisse fornito alcun valore, verrebbe fornita in output l'intera lista delle features presenti nel sistema. milieu : Lista \"comma separated\" dei gruppi di features da recuperare. Se presente agisce da filtro rispetto al risultato elaborato in base al parametro \"uids\" info : Lista \"comma separated\" delle informazioni relative ad ogni feature da includere nella risposta. In generale dei sottoalberi Json. Le classi di informazione disponibili sono: capabilities : tipi di interrogazioni eseguibili sulla feature: elenco comprendente una, nessuna o pi\u00f9 voci tra queste: data , map , cloud . Vedi GET query parameters : parametri (timeseries) associati alla feature, interrogabili tramite GET query timeline : eventuale timeline globale dei parametri della feature ESEMPIO: GET features?milieu=619d00137303c&info=parameters,capabilities OUTPUT: All'interno del campo data del json di risposta standard viene restituito un oggetto \"chiave, valore\" json che \u00e9 interpretabile come GeoJson estraendo la lista dei values. L'oggetto contiene tutte le features che rientrano nei criteri di ricerca. Quindi un struttura di questo tipo: \"features\": { \"1285beb4\": { \"type\": \"Feature\", \"properties\": { \"uid\": \"1285beb4\", \"classification\": \"Source\", \"milieu\": \"619d00137303c\", \"description\": null, \"label\": \"CAM1\", \"location\": null, \"status\": \"0\", \"style\": \"9cecce36\", \"timestamp\": \"2021-11-10 00:00:00\", \"type\": \"PhotoMonitoring\", \"inmap\": null }, \"parameters\": [ { \"series\": \"06578ff5509871eef7e62f8d2bc175de\", \"param\": \"Displacement\", \"unit\": \"mm\", }, { \"series\": \"2388b145eed5036e78afff43114cf7f7\", \"param\": \"Correlation_Coefficient\", \"unit\": \"number\", }, ], \"timeline\": [ \"2021-11-04T15:11:45\" ], \"capabilities\": [ \"map\" ] }, } RESPONSE CODES: 200 OK : Nel caso vengano trovate features corrispondenti ai criteri di ricerca 404 Not Found : Nel caso in cui nessuna feature risponda ai criteri di ricerca GET /features/{uid} params : uid : Basic text / string value milieu : Basic text / string value info : Basic text / string value result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 usage : DESCRIZIONE: Alias di recupero informazioni della specifica feature PARAMETRI: info : Lista \"comma separated\" delle informazioni relative ad ogni feature da includere nella risposta. In generale dei sottoalberi Json. Le classi di informazione disponibili sono: capabilities : tipi di interrogazioni eseguibili sulla feature: elenco comprendente una, nessuna o pi\u00f9 voci tra queste: data , map , cloud . Vedi GET query parameters : parametri (timeseries) associati alla feature, interrogabili tramite GET query timeline : eventuale timeline globale dei parametri della feature ESEMPIO: GET features/1285beb4&info=parameters,capabilities OUTPUT: Vedi GET features RESPONSE CODES: 200 OK : Nel caso vengano trovate features corrispondenti ai criteri di ricerca 404 Not Found : Nel caso in cui nessuna feature risponda ai criteri di ricerca PUT /features/{uid} params : uid : Basic text / string value properties : JSON Schema { style : str|bytes, description : str|bytes, status : str|bytes, timestamp : str|bytes, milieu : str|bytes, label : str|bytes, location : str|bytes} geometry : JSON Schema {} result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 usage : Modifica delle properties di una feature Possibili risposte: 404 Not Found : Nel caso in cui il prototipo richiesto non esista. 200 Ok : Nel caso in cui la feature venga modificata correttamente. DELETE /features/{uid} params : uid : Basic text / string value result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 usage : Cancellazione delle Features Se la feature viene cancellata correttamente ne restituisce la struttura Possibili risposte: 404 Not Found : Nel caso in cui il prototipo richiesto non esista. 200 Accepted : Nel caso in cui la feature venga eliminata correttamente.","title":"Features"},{"location":"docs/API%20Reference/features/#features","text":"","title":"Features"},{"location":"docs/API%20Reference/features/#post-features","text":"params : prototype : Basic text / string value properties : JSON Schema { style : str|bytes, description : str|bytes, status : str|bytes, timestamp : str|bytes, milieu : str|bytes, label : str|bytes, location : str|bytes} geometry : JSON Schema {} result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 usage : DESCRIZIONE: Creazione delle Features. Ogni feature viene creata sulla il suo il suo prototipo prototype ed in fase di creazione viene creato il campo uid . Questi due campi sono immutabli. Vedi PUT feature PARAMETRI: prototype : Definisce il tipo della feature e accetta uno dei valori recuperabili attraverso l'API GET prototype properties : Json dei campi anagrafici della feature, utilizzati dal sistema. Nessuno di essi \u00e8 obbligatorio. Lo schema \u00e8 il seguente: { \"milieu\": \"Stringa: gruppo in cui inserire la feature\", \"label\": \"Stringa: etichetta mnemonica della feature\", \"description\": \"Stringa: descrizione della feature\", \"location\": \"Stringa: descrizione mnemonica della posizioni\", \"style\": \"Stringa: informazioni per le direttive csv\", \"status\": \"Stringa: informaizoni di stato\", \"timestamp\": \"Stringa: data di creazione della feature nel formato YYYY-MM-DD HH:MM:SS\" } geometry : Accetta un GeoJson OUTPUT: Se la feature viene creata correttamente la sua struttura viene restituita all'interno del campo data del json di risposta standard RESPONSE CODES: 409 Conflict : Nel caso in cui il uid fornito esista gi\u00e0. 404 Not Found : Nel caso in cui il prototipo richiesto non esista. 201 Created : Nel caso in cui la feature venga creata correttamente.","title":"POST   /features/"},{"location":"docs/API%20Reference/features/#get-features","text":"params : uids : Basic text / string value milieu : Basic text / string value info : Basic text / string value result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 usage : DESCRIZIONE: Recupero delle informazioni delle features. PARAMETRI: uids : Lista \"comma separated\" degli id delle features da recuperare. Nel caso in cui non venisse fornito alcun valore, verrebbe fornita in output l'intera lista delle features presenti nel sistema. milieu : Lista \"comma separated\" dei gruppi di features da recuperare. Se presente agisce da filtro rispetto al risultato elaborato in base al parametro \"uids\" info : Lista \"comma separated\" delle informazioni relative ad ogni feature da includere nella risposta. In generale dei sottoalberi Json. Le classi di informazione disponibili sono: capabilities : tipi di interrogazioni eseguibili sulla feature: elenco comprendente una, nessuna o pi\u00f9 voci tra queste: data , map , cloud . Vedi GET query parameters : parametri (timeseries) associati alla feature, interrogabili tramite GET query timeline : eventuale timeline globale dei parametri della feature ESEMPIO: GET features?milieu=619d00137303c&info=parameters,capabilities OUTPUT: All'interno del campo data del json di risposta standard viene restituito un oggetto \"chiave, valore\" json che \u00e9 interpretabile come GeoJson estraendo la lista dei values. L'oggetto contiene tutte le features che rientrano nei criteri di ricerca. Quindi un struttura di questo tipo: \"features\": { \"1285beb4\": { \"type\": \"Feature\", \"properties\": { \"uid\": \"1285beb4\", \"classification\": \"Source\", \"milieu\": \"619d00137303c\", \"description\": null, \"label\": \"CAM1\", \"location\": null, \"status\": \"0\", \"style\": \"9cecce36\", \"timestamp\": \"2021-11-10 00:00:00\", \"type\": \"PhotoMonitoring\", \"inmap\": null }, \"parameters\": [ { \"series\": \"06578ff5509871eef7e62f8d2bc175de\", \"param\": \"Displacement\", \"unit\": \"mm\", }, { \"series\": \"2388b145eed5036e78afff43114cf7f7\", \"param\": \"Correlation_Coefficient\", \"unit\": \"number\", }, ], \"timeline\": [ \"2021-11-04T15:11:45\" ], \"capabilities\": [ \"map\" ] }, } RESPONSE CODES: 200 OK : Nel caso vengano trovate features corrispondenti ai criteri di ricerca 404 Not Found : Nel caso in cui nessuna feature risponda ai criteri di ricerca","title":"GET    /features/"},{"location":"docs/API%20Reference/features/#get-featuresuid","text":"params : uid : Basic text / string value milieu : Basic text / string value info : Basic text / string value result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 usage : DESCRIZIONE: Alias di recupero informazioni della specifica feature PARAMETRI: info : Lista \"comma separated\" delle informazioni relative ad ogni feature da includere nella risposta. In generale dei sottoalberi Json. Le classi di informazione disponibili sono: capabilities : tipi di interrogazioni eseguibili sulla feature: elenco comprendente una, nessuna o pi\u00f9 voci tra queste: data , map , cloud . Vedi GET query parameters : parametri (timeseries) associati alla feature, interrogabili tramite GET query timeline : eventuale timeline globale dei parametri della feature ESEMPIO: GET features/1285beb4&info=parameters,capabilities OUTPUT: Vedi GET features RESPONSE CODES: 200 OK : Nel caso vengano trovate features corrispondenti ai criteri di ricerca 404 Not Found : Nel caso in cui nessuna feature risponda ai criteri di ricerca","title":"GET    /features/{uid}"},{"location":"docs/API%20Reference/features/#put-featuresuid","text":"params : uid : Basic text / string value properties : JSON Schema { style : str|bytes, description : str|bytes, status : str|bytes, timestamp : str|bytes, milieu : str|bytes, label : str|bytes, location : str|bytes} geometry : JSON Schema {} result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 usage : Modifica delle properties di una feature Possibili risposte: 404 Not Found : Nel caso in cui il prototipo richiesto non esista. 200 Ok : Nel caso in cui la feature venga modificata correttamente.","title":"PUT    /features/{uid}"},{"location":"docs/API%20Reference/features/#delete-featuresuid","text":"params : uid : Basic text / string value result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 usage : Cancellazione delle Features Se la feature viene cancellata correttamente ne restituisce la struttura Possibili risposte: 404 Not Found : Nel caso in cui il prototipo richiesto non esista. 200 Accepted : Nel caso in cui la feature venga eliminata correttamente.","title":"DELETE /features/{uid}"},{"location":"docs/API%20Reference/parameters/","text":"Parameters /parameters/ GET params : uids : Basic text / string value params : Basic text / string value cntxt : Basic text / string value result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 description : ** Ricerca dei parametri associati alle features ** . __nota__ : uid accetta valori multipli separati da virgola viene restituita una struttura di questo tipo : { \"<fetUID>\" :[ { \"series\" : \"<series_UID>\" , \"param\" : \"<param_name>\" , \"um\" : \"<mearurement_unit>\" } ... ] ... } Possibili risposte : - _404 Not Found_ : Nel caso in cui nessun parametro risponda ai criteri /parameters/{uid} GET params : uid : Basic text / string value params : Basic text / string value cntxt : Basic text / string value result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 description : **Alias di ricerca dei Parametri della specifica Feature** /parameters/{uid}/{param} GET params : uid : Basic text / string value param : Basic text / string value cntxt : Basic text / string value result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 description : **Alias di ricerca dello specifico Parametro della specifica Feature lo specifico contesto**","title":"Parameters"},{"location":"docs/API%20Reference/parameters/#parameters","text":"","title":"Parameters"},{"location":"docs/API%20Reference/parameters/#parameters_1","text":"","title":"/parameters/"},{"location":"docs/API%20Reference/parameters/#get","text":"params : uids : Basic text / string value params : Basic text / string value cntxt : Basic text / string value result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 description : ** Ricerca dei parametri associati alle features ** . __nota__ : uid accetta valori multipli separati da virgola viene restituita una struttura di questo tipo : { \"<fetUID>\" :[ { \"series\" : \"<series_UID>\" , \"param\" : \"<param_name>\" , \"um\" : \"<mearurement_unit>\" } ... ] ... } Possibili risposte : - _404 Not Found_ : Nel caso in cui nessun parametro risponda ai criteri","title":"GET"},{"location":"docs/API%20Reference/parameters/#parametersuid","text":"","title":"/parameters/{uid}"},{"location":"docs/API%20Reference/parameters/#get_1","text":"params : uid : Basic text / string value params : Basic text / string value cntxt : Basic text / string value result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 description : **Alias di ricerca dei Parametri della specifica Feature**","title":"GET"},{"location":"docs/API%20Reference/parameters/#parametersuidparam","text":"","title":"/parameters/{uid}/{param}"},{"location":"docs/API%20Reference/parameters/#get_2","text":"params : uid : Basic text / string value param : Basic text / string value cntxt : Basic text / string value result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 description : **Alias di ricerca dello specifico Parametro della specifica Feature lo specifico contesto**","title":"GET"},{"location":"docs/API%20Reference/prototypes/","text":"Prototypes GET /prototypes/ params : result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 usage : Ritorna l'elenco dei prototipi disponibili come array json GET /prototypes/{prototype} params : prototype : Basic text / string value result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 usage : Ritorna informazioni dettagliate sullo specifico prototipo","title":"Prototypes"},{"location":"docs/API%20Reference/prototypes/#prototypes","text":"","title":"Prototypes"},{"location":"docs/API%20Reference/prototypes/#get-prototypes","text":"params : result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 usage : Ritorna l'elenco dei prototipi disponibili come array json","title":"GET    /prototypes/"},{"location":"docs/API%20Reference/prototypes/#get-prototypesprototype","text":"params : prototype : Basic text / string value result : format : JSON (Javascript Serialized Object Notation) content_type : application/json; charset=utf-8 usage : Ritorna informazioni dettagliate sullo specifico prototipo","title":"GET    /prototypes/{prototype}"},{"location":"docs/API%20Reference/query/","text":"Query GET /query/{capability} params : capability : Basic text / string value datamap : JSON Schema [{ series : [str|bytes], refresh : bool, timeref : str|bytes, geometry : [], times : }] content_type : Basic text / string value result : format : Supports any of the following formats: JSON (Javascript Serialized Object Notation), Free form UTF-8 text content_type : application/json; charset=utf-8, text/plain; charset=utf-8 usage : GET /query/{capability}/{feature}/ params : capability : Basic text / string value feature : Basic text / string value par : Basic text / string value times : Basic text / string value timeref : Basic text / string value refresh : Basic text / string value geometry : Basic text / string value content_type : Basic text / string value result : format : Supports any of the following formats: JSON (Javascript Serialized Object Notation), Free form UTF-8 text content_type : application/json; charset=utf-8, text/plain; charset=utf-8 usage : GET /query/{capability}/{feature}/{par} params : capability : Basic text / string value feature : Basic text / string value par : Basic text / string value times : Basic text / string value timeref : Basic text / string value refresh : Basic text / string value geometry : Basic text / string value content_type : Basic text / string value result : format : Supports any of the following formats: JSON (Javascript Serialized Object Notation), Free form UTF-8 text content_type : application/json; charset=utf-8, text/plain; charset=utf-8 usage :","title":"Query"},{"location":"docs/API%20Reference/query/#query","text":"","title":"Query"},{"location":"docs/API%20Reference/query/#get-querycapability","text":"params : capability : Basic text / string value datamap : JSON Schema [{ series : [str|bytes], refresh : bool, timeref : str|bytes, geometry : [], times : }] content_type : Basic text / string value result : format : Supports any of the following formats: JSON (Javascript Serialized Object Notation), Free form UTF-8 text content_type : application/json; charset=utf-8, text/plain; charset=utf-8 usage :","title":"GET    /query/{capability}"},{"location":"docs/API%20Reference/query/#get-querycapabilityfeature","text":"params : capability : Basic text / string value feature : Basic text / string value par : Basic text / string value times : Basic text / string value timeref : Basic text / string value refresh : Basic text / string value geometry : Basic text / string value content_type : Basic text / string value result : format : Supports any of the following formats: JSON (Javascript Serialized Object Notation), Free form UTF-8 text content_type : application/json; charset=utf-8, text/plain; charset=utf-8 usage :","title":"GET    /query/{capability}/{feature}/"},{"location":"docs/API%20Reference/query/#get-querycapabilityfeaturepar","text":"params : capability : Basic text / string value feature : Basic text / string value par : Basic text / string value times : Basic text / string value timeref : Basic text / string value refresh : Basic text / string value geometry : Basic text / string value content_type : Basic text / string value result : format : Supports any of the following formats: JSON (Javascript Serialized Object Notation), Free form UTF-8 text content_type : application/json; charset=utf-8, text/plain; charset=utf-8 usage :","title":"GET    /query/{capability}/{feature}/{par}"}]}