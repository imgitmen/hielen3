{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"HIELEN Prototipazione degli elementi prototypes Api dedicata alle tipologie di elementi e alle azioni (di input) specifiche. Le azioni sono statiche, nel senso che devono essere approntate in modo programmatico. Attualmente sono: config feed Ci\u00f2 che \u00e8 dinaminco \u00e8 il modo in cui le singole tipologie implementano queste azioni. Questa api serve a conoscere i campi da presentare in front-end all'utente per comporre la maschera di azione. POST {uri}/prototypes GET {uri}/prototypes GET {uri}/prototypes/{type} GET {uri}/prototypes/{type}/forms GET {uri}/prototypes/{type}/forms/{form} tutte le UI create in questo modo saranno aperte su uno specifico elemento del sistema il cui codice \u00e8 noto. Il submit della form invier\u00e0 le informazioni ad una url di questo genere: {uri}/actions/{el}/{action} con un mimetype di tipo multipart/form-data Manipolazione elenco elementi elements Api dedicata agli elementi del sistema: il succo della faccenda. Considerazione: gli elementi sono oggetti che producono \"elaborazioni\" nel tempo con un caratteristico grado dimensionale (dato, mappe, nuvole). E' sempre possibile \"proiettare\" una \"elaborazione\" con grado maggiore su una di grado inferiore. Cos\u00ec da una nuvola pu\u00f2 generare mappe e dalla nuvola o dalle mappe possono essere estratte delle serie storiche. nota 1 : Nelle api di input/output non viene mai specificato il tipo dell'elemento. Questo perch\u00e8: 1. Ad ogni elemento DEVE corrispondere Uno ed Un solo tipo. Questa non \u00e8 una restrizione troppo forzata perch\u00e8 \u00e8 sempre possibile definiere elementi nuovi spazialmente coincidenti. 2. Per il motivo precedente il back-end \u00e8 sempre in grado di recuperare il tipo dell'elemento. nota 2 : La \"mappa degli strumenti\" pu\u00f2 essere considerata essa stessa un elemento di tipo mappa... POST {uri}/elements/ GET {uri}/elements/ GET {uri}/elements/{el} DELETE {uri}/elements/{el} PUT {uri}/elements/{el} Interrogazione elementi: operazioni di output L'interrogazione pu\u00f2 riguardare pi\u00f9 di un elemento contemporaneamente ed \u00e8 rivolta in questo modo: sitema --> utente Per questo motivo la struttura della richiesta prevede di specificare prima l'azione ( base , timeline , series , map , cloud ) e poi eventualmente l'elemento. nota 1 : non tutte queste api saranno disponibili per tutti gli elementi. Per ogni elemento sar\u00e0 noto l'elenco a disposizone tramite backend (presumibilemnte attraverso GET {uri}/elements/[{el}]) series GET {uri}/series GET {uri}/series/{el} GET {uri}/series/{el}/{param} bases GET {uri}/bases GET {uri}/bases/{el} timelines GET {uri}/timelines GET {uri}/timelines/{el} maps GET {uri}/maps/[/z/x/y] GET {uri}/maps/{el}/[z/x/y] clouds GET {uri}/clouds GET {uri}/clouds/{el} Azioni sugli elementi: operazioni di input In questo caso le azioni servono a modificare lo stato di un elemento: sistema <-- utente la richiesta viene composta specificando necessariamente l'elemento prima dell'azione. nota 1 : queste trovano riscontro nell'endpoint forms dell'api prototypes. actions Le due azioni attualemente previste sono: config POST {uri}/actions/{el}/config GET {uri}/actions/{el}/config PUT {uri}/actions/{el}/config feed POST {uri}/actions/{el}/feed GET {uri}/actions/{el}/feed PUT {uri}/actions/{el}/feed/{time}","title":"Home"},{"location":"#hielen","text":"","title":"HIELEN"},{"location":"#prototipazione-degli-elementi","text":"","title":"Prototipazione degli elementi"},{"location":"#prototypes","text":"Api dedicata alle tipologie di elementi e alle azioni (di input) specifiche. Le azioni sono statiche, nel senso che devono essere approntate in modo programmatico. Attualmente sono: config feed Ci\u00f2 che \u00e8 dinaminco \u00e8 il modo in cui le singole tipologie implementano queste azioni. Questa api serve a conoscere i campi da presentare in front-end all'utente per comporre la maschera di azione. POST {uri}/prototypes GET {uri}/prototypes GET {uri}/prototypes/{type} GET {uri}/prototypes/{type}/forms GET {uri}/prototypes/{type}/forms/{form} tutte le UI create in questo modo saranno aperte su uno specifico elemento del sistema il cui codice \u00e8 noto. Il submit della form invier\u00e0 le informazioni ad una url di questo genere: {uri}/actions/{el}/{action} con un mimetype di tipo multipart/form-data","title":"prototypes"},{"location":"#manipolazione-elenco-elementi","text":"","title":"Manipolazione elenco elementi"},{"location":"#elements","text":"Api dedicata agli elementi del sistema: il succo della faccenda. Considerazione: gli elementi sono oggetti che producono \"elaborazioni\" nel tempo con un caratteristico grado dimensionale (dato, mappe, nuvole). E' sempre possibile \"proiettare\" una \"elaborazione\" con grado maggiore su una di grado inferiore. Cos\u00ec da una nuvola pu\u00f2 generare mappe e dalla nuvola o dalle mappe possono essere estratte delle serie storiche. nota 1 : Nelle api di input/output non viene mai specificato il tipo dell'elemento. Questo perch\u00e8: 1. Ad ogni elemento DEVE corrispondere Uno ed Un solo tipo. Questa non \u00e8 una restrizione troppo forzata perch\u00e8 \u00e8 sempre possibile definiere elementi nuovi spazialmente coincidenti. 2. Per il motivo precedente il back-end \u00e8 sempre in grado di recuperare il tipo dell'elemento. nota 2 : La \"mappa degli strumenti\" pu\u00f2 essere considerata essa stessa un elemento di tipo mappa... POST {uri}/elements/ GET {uri}/elements/ GET {uri}/elements/{el} DELETE {uri}/elements/{el} PUT {uri}/elements/{el}","title":"elements"},{"location":"#interrogazione-elementi-operazioni-di-output","text":"L'interrogazione pu\u00f2 riguardare pi\u00f9 di un elemento contemporaneamente ed \u00e8 rivolta in questo modo: sitema --> utente Per questo motivo la struttura della richiesta prevede di specificare prima l'azione ( base , timeline , series , map , cloud ) e poi eventualmente l'elemento. nota 1 : non tutte queste api saranno disponibili per tutti gli elementi. Per ogni elemento sar\u00e0 noto l'elenco a disposizone tramite backend (presumibilemnte attraverso GET {uri}/elements/[{el}])","title":"Interrogazione elementi: operazioni di output"},{"location":"#series","text":"GET {uri}/series GET {uri}/series/{el} GET {uri}/series/{el}/{param}","title":"series"},{"location":"#bases","text":"GET {uri}/bases GET {uri}/bases/{el}","title":"bases"},{"location":"#timelines","text":"GET {uri}/timelines GET {uri}/timelines/{el}","title":"timelines"},{"location":"#maps","text":"GET {uri}/maps/[/z/x/y] GET {uri}/maps/{el}/[z/x/y]","title":"maps"},{"location":"#clouds","text":"GET {uri}/clouds GET {uri}/clouds/{el}","title":"clouds"},{"location":"#azioni-sugli-elementi-operazioni-di-input","text":"In questo caso le azioni servono a modificare lo stato di un elemento: sistema <-- utente la richiesta viene composta specificando necessariamente l'elemento prima dell'azione. nota 1 : queste trovano riscontro nell'endpoint forms dell'api prototypes.","title":"Azioni sugli elementi: operazioni di input"},{"location":"#actions","text":"Le due azioni attualemente previste sono: config POST {uri}/actions/{el}/config GET {uri}/actions/{el}/config PUT {uri}/actions/{el}/config feed POST {uri}/actions/{el}/feed GET {uri}/actions/{el}/feed PUT {uri}/actions/{el}/feed/{time}","title":"actions"},{"location":"api/","text":"prototypes /prototypes/ POST {'outputs': {'format': 'JSON (Javascript Serialized Object Notation)', 'content_type': 'application/json; charset=utf-8'}, 'inputs': {'code': {'type': 'Basic text / string value'}}} GET {'examples': ['http://localhost/prototypes/?/'], 'outputs': {'format': 'JSON (Javascript Serialized Object Notation)', 'content_type': 'application/json; charset=utf-8'}} /prototypes/{eltype} GET {'outputs': {'format': 'JSON (Javascript Serialized Object Notation)', 'content_type': 'application/json; charset=utf-8'}, 'inputs': {'eltype': {'type': 'Basic text / string value'}}} /prototypes/{eltype}/forms GET {'outputs': {'format': 'JSON (Javascript Serialized Object Notation)', 'content_type': 'application/json; charset=utf-8'}, 'inputs': {'eltype': {'type': 'Basic text / string value'}}} /prototypes/{eltype}/forms/{form} GET {'outputs': {'format': 'JSON (Javascript Serialized Object Notation)', 'content_type': 'application/json; charset=utf-8'}, 'inputs': {'eltype': {'type': 'Basic text / string value'}, 'form': {'type': 'Basic text / string value'}}} elements /elements/ POST {'outputs': {'format': 'JSON (Javascript Serialized Object Notation)', 'content_type': 'application/json; charset=utf-8'}, 'inputs': {'code': {'type': 'Basic text / string value'}, 'prototype': {'type': 'Basic text / string value'}}} GET {'examples': ['http://localhost/elements/'], 'outputs': {'format': 'JSON (Javascript Serialized Object Notation)', 'content_type': 'application/json; charset=utf-8'}, 'inputs': {'elist': {'type': 'Basic text / string value'}}} /elements/{code} GET {'outputs': {'format': 'JSON (Javascript Serialized Object Notation)', 'content_type': 'application/json; charset=utf-8'}, 'inputs': {'code': {'type': 'Basic text / string value'}}} series /series/ GET {'outputs': {'format': 'Supports any of the following formats: Free form UTF-8 text, JSON (Javascript Serialized Object Notation)', 'content_type': 'text/plain; charset=utf-8, application/json; charset=utf-8'}, 'inputs': {'datamap': {'type': 'Basic text / string value'}}} /series/{el}/ GET {'outputs': {'format': 'Supports any of the following formats: Free form UTF-8 text, JSON (Javascript Serialized Object Notation)', 'content_type': 'text/plain; charset=utf-8, application/json; charset=utf-8'}, 'inputs': {'el': {'type': 'Basic text / string value'}, 'par': {'type': 'Basic text / string value'}, 'timefrom': {'type': 'Basic text / string value'}, 'timeto': {'type': 'Basic text / string value'}}} /series/{el}/{par} GET {'examples': ['http://localhost/series/{el}/{par}'], 'outputs': {'format': 'Supports any of the following formats: Free form UTF-8 text, JSON (Javascript Serialized Object Notation)', 'content_type': 'text/plain; charset=utf-8, application/json; charset=utf-8'}, 'inputs': {'el': {'type': 'Basic text / string value'}, 'par': {'type': 'Basic text / string value'}, 'timefrom': {'type': 'Basic text / string value'}, 'timeto': {'type': 'Basic text / string value'}}}","title":"API Reference"},{"location":"api/#prototypes","text":"/prototypes/","title":"prototypes"},{"location":"api/#post","text":"{'outputs': {'format': 'JSON (Javascript Serialized Object Notation)', 'content_type': 'application/json; charset=utf-8'}, 'inputs': {'code': {'type': 'Basic text / string value'}}}","title":"POST"},{"location":"api/#get","text":"{'examples': ['http://localhost/prototypes/?/'], 'outputs': {'format': 'JSON (Javascript Serialized Object Notation)', 'content_type': 'application/json; charset=utf-8'}} /prototypes/{eltype}","title":"GET"},{"location":"api/#get_1","text":"{'outputs': {'format': 'JSON (Javascript Serialized Object Notation)', 'content_type': 'application/json; charset=utf-8'}, 'inputs': {'eltype': {'type': 'Basic text / string value'}}} /prototypes/{eltype}/forms","title":"GET"},{"location":"api/#get_2","text":"{'outputs': {'format': 'JSON (Javascript Serialized Object Notation)', 'content_type': 'application/json; charset=utf-8'}, 'inputs': {'eltype': {'type': 'Basic text / string value'}}} /prototypes/{eltype}/forms/{form}","title":"GET"},{"location":"api/#get_3","text":"{'outputs': {'format': 'JSON (Javascript Serialized Object Notation)', 'content_type': 'application/json; charset=utf-8'}, 'inputs': {'eltype': {'type': 'Basic text / string value'}, 'form': {'type': 'Basic text / string value'}}}","title":"GET"},{"location":"api/#elements","text":"/elements/","title":"elements"},{"location":"api/#post_1","text":"{'outputs': {'format': 'JSON (Javascript Serialized Object Notation)', 'content_type': 'application/json; charset=utf-8'}, 'inputs': {'code': {'type': 'Basic text / string value'}, 'prototype': {'type': 'Basic text / string value'}}}","title":"POST"},{"location":"api/#get_4","text":"{'examples': ['http://localhost/elements/'], 'outputs': {'format': 'JSON (Javascript Serialized Object Notation)', 'content_type': 'application/json; charset=utf-8'}, 'inputs': {'elist': {'type': 'Basic text / string value'}}} /elements/{code}","title":"GET"},{"location":"api/#get_5","text":"{'outputs': {'format': 'JSON (Javascript Serialized Object Notation)', 'content_type': 'application/json; charset=utf-8'}, 'inputs': {'code': {'type': 'Basic text / string value'}}}","title":"GET"},{"location":"api/#series","text":"/series/","title":"series"},{"location":"api/#get_6","text":"{'outputs': {'format': 'Supports any of the following formats: Free form UTF-8 text, JSON (Javascript Serialized Object Notation)', 'content_type': 'text/plain; charset=utf-8, application/json; charset=utf-8'}, 'inputs': {'datamap': {'type': 'Basic text / string value'}}} /series/{el}/","title":"GET"},{"location":"api/#get_7","text":"{'outputs': {'format': 'Supports any of the following formats: Free form UTF-8 text, JSON (Javascript Serialized Object Notation)', 'content_type': 'text/plain; charset=utf-8, application/json; charset=utf-8'}, 'inputs': {'el': {'type': 'Basic text / string value'}, 'par': {'type': 'Basic text / string value'}, 'timefrom': {'type': 'Basic text / string value'}, 'timeto': {'type': 'Basic text / string value'}}} /series/{el}/{par}","title":"GET"},{"location":"api/#get_8","text":"{'examples': ['http://localhost/series/{el}/{par}'], 'outputs': {'format': 'Supports any of the following formats: Free form UTF-8 text, JSON (Javascript Serialized Object Notation)', 'content_type': 'text/plain; charset=utf-8, application/json; charset=utf-8'}, 'inputs': {'el': {'type': 'Basic text / string value'}, 'par': {'type': 'Basic text / string value'}, 'timefrom': {'type': 'Basic text / string value'}, 'timeto': {'type': 'Basic text / string value'}}}","title":"GET"},{"location":"reference/hielen2/","text":"Module hielen2 View Source # coding=utf-8 __name__ = 'hielen2' __version__ = '2.0.1' __author__ = 'Alessandro Modesti' __email__ = 'it@img-srl.com' __description__ = 'Multidimention Hierarichical Elaboration Engine' __license__ = 'MIT' __uri__ = '' import warnings from .datalink import dbinit #, cacheinit from .utils import loadjsonfile conf = loadjsonfile ( './conf/hielen.json' ) db = dbinit ( conf ) def int_or_str ( value ): try : return int ( value ) except ValueError : return value VERSION = tuple ( map ( int_or_str , __version__ . split ( '.' ))) __all__ = [ 'api' , 'conf' , 'db' , ] Sub-modules hielen2.api hielen2.api_elements hielen2.api_prototypes hielen2.api_series hielen2.datalink hielen2.series hielen2.utils Variables conf db","title":"Index"},{"location":"reference/hielen2/#module-hielen2","text":"View Source # coding=utf-8 __name__ = 'hielen2' __version__ = '2.0.1' __author__ = 'Alessandro Modesti' __email__ = 'it@img-srl.com' __description__ = 'Multidimention Hierarichical Elaboration Engine' __license__ = 'MIT' __uri__ = '' import warnings from .datalink import dbinit #, cacheinit from .utils import loadjsonfile conf = loadjsonfile ( './conf/hielen.json' ) db = dbinit ( conf ) def int_or_str ( value ): try : return int ( value ) except ValueError : return value VERSION = tuple ( map ( int_or_str , __version__ . split ( '.' ))) __all__ = [ 'api' , 'conf' , 'db' , ]","title":"Module hielen2"},{"location":"reference/hielen2/#sub-modules","text":"hielen2.api hielen2.api_elements hielen2.api_prototypes hielen2.api_series hielen2.datalink hielen2.series hielen2.utils","title":"Sub-modules"},{"location":"reference/hielen2/#variables","text":"conf db","title":"Variables"},{"location":"reference/hielen2/api/","text":"Module hielen2.api View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 #!/usr/bin/env python # coding=utf-8 import hug from . import api_elements , api_prototypes , api_series import falcon ''' @hug.not_found() def not_found(): return {'error': { 'status': falcon.status.HTTP_NOT_FOUND, 'description': 'URL is invalid.', }} api = hug.get(on_invalid=hug.redirect.not_found) ''' @hug . extend_api ( '/prototypes' ) def proto (): ''' Prototypes manager ''' return [ api_prototypes ] @hug . extend_api ( '/elements' ) def elem (): ''' Elements manager ''' return [ api_elements ] @hug . extend_api ( '/series' ) def series (): ''' Series manager ''' return [ api_series ] Functions elem def elem ( ) Elements manager View Source @hug . extend_api ( '/elements' ) def elem () : ''' Elements manager ''' return [ api_elements ] proto def proto ( ) Prototypes manager View Source @hug . extend_api ( '/prototypes' ) def proto () : ''' Prototypes manager ''' return [ api_prototypes ] series def series ( ) Series manager View Source @hug . extend_api ( '/series' ) def series () : ''' Series manager ''' return [ api_series ]","title":"API"},{"location":"reference/hielen2/api/#module-hielen2api","text":"View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 #!/usr/bin/env python # coding=utf-8 import hug from . import api_elements , api_prototypes , api_series import falcon ''' @hug.not_found() def not_found(): return {'error': { 'status': falcon.status.HTTP_NOT_FOUND, 'description': 'URL is invalid.', }} api = hug.get(on_invalid=hug.redirect.not_found) ''' @hug . extend_api ( '/prototypes' ) def proto (): ''' Prototypes manager ''' return [ api_prototypes ] @hug . extend_api ( '/elements' ) def elem (): ''' Elements manager ''' return [ api_elements ] @hug . extend_api ( '/series' ) def series (): ''' Series manager ''' return [ api_series ]","title":"Module hielen2.api"},{"location":"reference/hielen2/api/#functions","text":"","title":"Functions"},{"location":"reference/hielen2/api/#elem","text":"def elem ( ) Elements manager View Source @hug . extend_api ( '/elements' ) def elem () : ''' Elements manager ''' return [ api_elements ]","title":"elem"},{"location":"reference/hielen2/api/#proto","text":"def proto ( ) Prototypes manager View Source @hug . extend_api ( '/prototypes' ) def proto () : ''' Prototypes manager ''' return [ api_prototypes ]","title":"proto"},{"location":"reference/hielen2/api/#series","text":"def series ( ) Series manager View Source @hug . extend_api ( '/series' ) def series () : ''' Series manager ''' return [ api_series ]","title":"series"},{"location":"reference/hielen2/api_elements/","text":"Module hielen2.api_elements View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 #!/usr/bin/env python # coding=utf-8 import hug import falcon from hielen2 import db from himada.api import ResponseFormatter @hug . post ( '/' ) def create_elements ( code , prototype , request = None , response = None ): return \"Not Yet Implemented\" def elinfo ( el ): if el is None : return None info = { k : w for k , w in el . items () if k not in ( 'code' ,) } info [ 'parameters' ] = [ { 'name' : e [ 0 ], 'unit' : db [ 'series' ][ e [ 1 ]][ 'mu' ]} for e in el [ 'parameters' ] . items () if e [ 1 ] is not None ] return info @hug . get ( '/' , examples = '' ) def elements_info ( elist = None , request = None , response = None ): return { k : elinfo ( w ) for k , w in db [ 'elements' ][ elist ] . items () } @hug . get ( '/ {code} ' , examples = '' ) def element_info ( code , request = None , response = None ): el = db [ 'elements' ][ code ] if code is None : out = ResponseFormatter ( status = falcon . HTTP_NOT_FOUND ) out . message = code response = out . format ( response = response , request = request ) return return elinfo ( el ) Variables db Functions create_elements def create_elements ( code , prototype , request = None , response = None ) View Source @hug . post ( '/' ) def create_elements ( code , prototype , request = None , response = None ) : return \"Not Yet Implemented\" element_info def element_info ( code , request = None , response = None ) View Source @hug . get ( '/{code}' , examples = '' ) def element_info ( code , request = None , response = None ) : el = db [ 'elements' ][ code ] if code is None : out = ResponseFormatter ( status = falcon . HTTP_NOT_FOUND ) out . message = code response = out . format ( response = response , request = request ) return return elinfo ( el ) elements_info def elements_info ( elist = None , request = None , response = None ) View Source @hug . get ( '/' , examples = '' ) def elements_info ( elist = None , request = None , response = None ) : return { k : elinfo ( w ) for k , w in db [ 'elements' ][ elist ] . items () } elinfo def elinfo ( el ) View Source def elinfo ( el ): if el is None : return None info = { k : w for k , w in el . items () if k not in ( 'code' ,) } info [ 'parameters' ] = [ { 'name' : e [ 0 ], 'unit' : db [ 'series' ][ e [ 1 ]][ 'mu' ] } for e in el [ 'parameters' ]. items () if e [ 1 ] is not None ] return info","title":"Api Elements"},{"location":"reference/hielen2/api_elements/#module-hielen2api_elements","text":"View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 #!/usr/bin/env python # coding=utf-8 import hug import falcon from hielen2 import db from himada.api import ResponseFormatter @hug . post ( '/' ) def create_elements ( code , prototype , request = None , response = None ): return \"Not Yet Implemented\" def elinfo ( el ): if el is None : return None info = { k : w for k , w in el . items () if k not in ( 'code' ,) } info [ 'parameters' ] = [ { 'name' : e [ 0 ], 'unit' : db [ 'series' ][ e [ 1 ]][ 'mu' ]} for e in el [ 'parameters' ] . items () if e [ 1 ] is not None ] return info @hug . get ( '/' , examples = '' ) def elements_info ( elist = None , request = None , response = None ): return { k : elinfo ( w ) for k , w in db [ 'elements' ][ elist ] . items () } @hug . get ( '/ {code} ' , examples = '' ) def element_info ( code , request = None , response = None ): el = db [ 'elements' ][ code ] if code is None : out = ResponseFormatter ( status = falcon . HTTP_NOT_FOUND ) out . message = code response = out . format ( response = response , request = request ) return return elinfo ( el )","title":"Module hielen2.api_elements"},{"location":"reference/hielen2/api_elements/#variables","text":"db","title":"Variables"},{"location":"reference/hielen2/api_elements/#functions","text":"","title":"Functions"},{"location":"reference/hielen2/api_elements/#create_elements","text":"def create_elements ( code , prototype , request = None , response = None ) View Source @hug . post ( '/' ) def create_elements ( code , prototype , request = None , response = None ) : return \"Not Yet Implemented\"","title":"create_elements"},{"location":"reference/hielen2/api_elements/#element_info","text":"def element_info ( code , request = None , response = None ) View Source @hug . get ( '/{code}' , examples = '' ) def element_info ( code , request = None , response = None ) : el = db [ 'elements' ][ code ] if code is None : out = ResponseFormatter ( status = falcon . HTTP_NOT_FOUND ) out . message = code response = out . format ( response = response , request = request ) return return elinfo ( el )","title":"element_info"},{"location":"reference/hielen2/api_elements/#elements_info","text":"def elements_info ( elist = None , request = None , response = None ) View Source @hug . get ( '/' , examples = '' ) def elements_info ( elist = None , request = None , response = None ) : return { k : elinfo ( w ) for k , w in db [ 'elements' ][ elist ] . items () }","title":"elements_info"},{"location":"reference/hielen2/api_elements/#elinfo","text":"def elinfo ( el ) View Source def elinfo ( el ): if el is None : return None info = { k : w for k , w in el . items () if k not in ( 'code' ,) } info [ 'parameters' ] = [ { 'name' : e [ 0 ], 'unit' : db [ 'series' ][ e [ 1 ]][ 'mu' ] } for e in el [ 'parameters' ]. items () if e [ 1 ] is not None ] return info","title":"elinfo"},{"location":"reference/hielen2/api_prototypes/","text":"Module hielen2.api_prototypes View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 #!/usr/bin/env python # coding=utf-8 import hug import falcon from hielen2 import db from himada.api import ResponseFormatter @hug . post ( '/' ) def new_protptype ( prototype , request = None , response = None ): return \"not yet implemented\" @hug . get ( '/' , examples = '/' ) def prototypes ( request = None , response = None ): out = ResponseFormatter () try : out . data = db [ 'prototypes' ][ None ] except KeyError as e : out . status = out . status = falcon . HTTP_NOT_FOUND out . message = str ( e ) response = out . format ( response = response , request = request ) @hug . get ( '/ {prototype} ' , examples = '' ) def protptype ( prototype , request = None , response = None ): out = ResponseFormatter () try : out . data = db [ 'prototypes' ][ prototype ] except KeyError as e : out . status = out . status = falcon . HTTP_NOT_FOUND out . message = str ( e ) response = out . format ( response = response , request = request ) @hug . get ( '/ {prototype} /forms' , examples = '' ) def prototype_forms ( eltype , request = None , response = None ): out = ResponseFormatter () try : out . data = db [ 'prototypes' ][ protoypes ][ 'forms' ] except KeyError as e : out . status = out . status = falcon . HTTP_NOT_FOUND out . message = str ( e ) response = out . format ( response = response , request = request ) @hug . get ( '/ {prototype} /forms/ {form} ' , examples = '' ) def prototype_form ( prototype , form , request = None , response = None ): out = ResponseFormatter () try : out . data = db [ 'prototypes' ][ prototype ][ 'forms' ][ form ] except KeyError as e : out . status = out . status = falcon . HTTP_NOT_FOUND out . message = str ( e ) response = out . format ( response = response , request = request ) Variables db Functions new_protptype def new_protptype ( prototype , request = None , response = None ) View Source @hug . post ( '/' ) def new_protptype ( prototype , request = None , response = None ) : return \"not yet implemented\" prototype_form def prototype_form ( prototype , form , request = None , response = None ) View Source @hug . get ( '/{prototype}/forms/{form}' , examples = '' ) def prototype_form ( prototype , form , request = None , response = None ) : out = ResponseFormatter () try : out . data = db [ 'prototypes' ][ prototype ][ 'forms' ][ form ] except KeyError as e : out . status = out . status = falcon . HTTP_NOT_FOUND out . message = str ( e ) response = out . format ( response = response , request = request ) prototype_forms def prototype_forms ( eltype , request = None , response = None ) View Source @hug . get ( '/{prototype}/forms' , examples = '' ) def prototype_forms ( eltype , request = None , response = None ) : out = ResponseFormatter () try : out . data = db [ 'prototypes' ][ protoypes ][ 'forms' ] except KeyError as e : out . status = out . status = falcon . HTTP_NOT_FOUND out . message = str ( e ) response = out . format ( response = response , request = request ) prototypes def prototypes ( request = None , response = None ) View Source @hug . get ( '/' , examples = '/' ) def prototypes ( request = None , response = None ) : out = ResponseFormatter () try : out . data = db [ 'prototypes' ][ None ] except KeyError as e : out . status = out . status = falcon . HTTP_NOT_FOUND out . message = str ( e ) response = out . format ( response = response , request = request ) protptype def protptype ( prototype , request = None , response = None ) View Source @hug . get ( '/{prototype}' , examples = '' ) def protptype ( prototype , request = None , response = None ) : out = ResponseFormatter () try : out . data = db [ 'prototypes' ][ prototype ] except KeyError as e : out . status = out . status = falcon . HTTP_NOT_FOUND out . message = str ( e ) response = out . format ( response = response , request = request )","title":"Api Prototypes"},{"location":"reference/hielen2/api_prototypes/#module-hielen2api_prototypes","text":"View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 #!/usr/bin/env python # coding=utf-8 import hug import falcon from hielen2 import db from himada.api import ResponseFormatter @hug . post ( '/' ) def new_protptype ( prototype , request = None , response = None ): return \"not yet implemented\" @hug . get ( '/' , examples = '/' ) def prototypes ( request = None , response = None ): out = ResponseFormatter () try : out . data = db [ 'prototypes' ][ None ] except KeyError as e : out . status = out . status = falcon . HTTP_NOT_FOUND out . message = str ( e ) response = out . format ( response = response , request = request ) @hug . get ( '/ {prototype} ' , examples = '' ) def protptype ( prototype , request = None , response = None ): out = ResponseFormatter () try : out . data = db [ 'prototypes' ][ prototype ] except KeyError as e : out . status = out . status = falcon . HTTP_NOT_FOUND out . message = str ( e ) response = out . format ( response = response , request = request ) @hug . get ( '/ {prototype} /forms' , examples = '' ) def prototype_forms ( eltype , request = None , response = None ): out = ResponseFormatter () try : out . data = db [ 'prototypes' ][ protoypes ][ 'forms' ] except KeyError as e : out . status = out . status = falcon . HTTP_NOT_FOUND out . message = str ( e ) response = out . format ( response = response , request = request ) @hug . get ( '/ {prototype} /forms/ {form} ' , examples = '' ) def prototype_form ( prototype , form , request = None , response = None ): out = ResponseFormatter () try : out . data = db [ 'prototypes' ][ prototype ][ 'forms' ][ form ] except KeyError as e : out . status = out . status = falcon . HTTP_NOT_FOUND out . message = str ( e ) response = out . format ( response = response , request = request )","title":"Module hielen2.api_prototypes"},{"location":"reference/hielen2/api_prototypes/#variables","text":"db","title":"Variables"},{"location":"reference/hielen2/api_prototypes/#functions","text":"","title":"Functions"},{"location":"reference/hielen2/api_prototypes/#new_protptype","text":"def new_protptype ( prototype , request = None , response = None ) View Source @hug . post ( '/' ) def new_protptype ( prototype , request = None , response = None ) : return \"not yet implemented\"","title":"new_protptype"},{"location":"reference/hielen2/api_prototypes/#prototype_form","text":"def prototype_form ( prototype , form , request = None , response = None ) View Source @hug . get ( '/{prototype}/forms/{form}' , examples = '' ) def prototype_form ( prototype , form , request = None , response = None ) : out = ResponseFormatter () try : out . data = db [ 'prototypes' ][ prototype ][ 'forms' ][ form ] except KeyError as e : out . status = out . status = falcon . HTTP_NOT_FOUND out . message = str ( e ) response = out . format ( response = response , request = request )","title":"prototype_form"},{"location":"reference/hielen2/api_prototypes/#prototype_forms","text":"def prototype_forms ( eltype , request = None , response = None ) View Source @hug . get ( '/{prototype}/forms' , examples = '' ) def prototype_forms ( eltype , request = None , response = None ) : out = ResponseFormatter () try : out . data = db [ 'prototypes' ][ protoypes ][ 'forms' ] except KeyError as e : out . status = out . status = falcon . HTTP_NOT_FOUND out . message = str ( e ) response = out . format ( response = response , request = request )","title":"prototype_forms"},{"location":"reference/hielen2/api_prototypes/#prototypes","text":"def prototypes ( request = None , response = None ) View Source @hug . get ( '/' , examples = '/' ) def prototypes ( request = None , response = None ) : out = ResponseFormatter () try : out . data = db [ 'prototypes' ][ None ] except KeyError as e : out . status = out . status = falcon . HTTP_NOT_FOUND out . message = str ( e ) response = out . format ( response = response , request = request )","title":"prototypes"},{"location":"reference/hielen2/api_prototypes/#protptype","text":"def protptype ( prototype , request = None , response = None ) View Source @hug . get ( '/{prototype}' , examples = '' ) def protptype ( prototype , request = None , response = None ) : out = ResponseFormatter () try : out . data = db [ 'prototypes' ][ prototype ] except KeyError as e : out . status = out . status = falcon . HTTP_NOT_FOUND out . message = str ( e ) response = out . format ( response = response , request = request )","title":"protptype"},{"location":"reference/hielen2/api_series/","text":"Module hielen2.api_series View Sourceusr/bin/env python # coding=utf-8 import hug import falcon import json from .utils import hug_output_format_conten_type from numpy import nan , unique from pandas import DataFrame , to_datetime from hielen2 import db from hielen2.series.data_access_layer import Series from himada.api import ResponseFormatter import asyncio data_out_handler = hug_output_format_conten_type ([ hug . output_format . text , hug . output_format . json ]) CSV = \"text/plain; charset=utf-8\" JSON = \"application/json; charset=utf-8\" def chkparam ( param ): el , par = param . split ( \":\" ) try : element = db [ 'elements' ][ el ] except KeyError : raise KeyError ( el ) try : parameter = element [ 'parameters' ][ par ] except KeyError : raise KeyError ( f \" { el } : { par } \" ) return parameter ####### API DATATABLE ####### @hug . get ( '/' , examples = '' , output = data_out_handler ) def tabular_data ( datamap , request = None , response = None ): if isinstance ( datamap , list ): datamap = ',' . join ( datamap ) try : loaded = json . loads ( datamap ) except json . JSONDecodeError as e : out = ResponseFormatter ( status = falcon . HTTP_BAD_REQUEST ) out . message = str ( e ) response = out . format ( response = response , request = request ) return parameters = {} for s in loaded : try : timefrom = s [ 'timefrom' ] except KeyError : timefrom = None try : timeto = s [ 'timeto' ] except KeyError : timeto = None for p in s [ 'parameters' ]: if p not in parameters . keys (): parameters [ p ] = [] try : seriescode = chkparam ( p ) except KeyError as e : out = ResponseFormatter ( status = falcon . HTTP_NOT_FOUND ) out . message = str ( e ) + \" not found\" response = out . format ( response = response , request = request ) return parameters [ p ] . append ( Series ( seriescode ) . thdata ( timefrom = timefrom , timeto = timeto ) ) out = DataFrame () for param , serieses in parameters . items (): ser = None for r in serieses : s = r . result () if ser is None : ser = s else : ser = ser . append ( s ) . sort_index () idx = unique ( ser . index . values , return_index = True )[ 1 ] ser = ser . iloc [ idx ] ser . columns = [ param ] out = out . join ( ser , how = 'outer' ) out . index . name = 'timestamp' requested = data_out_handler . requested ( request ) . content_type if ( requested == CSV ): return hug . types . text ( out . to_csv ()) if ( requested == JSON ): return hug . types . json ( out . to_json ( orient = 'table' )) @hug . get ( '/ {el} /' , output = data_out_handler ) def tabular_data_el ( el , par = None , timefrom = None , timeto = None , request = None , response = None ): try : element = db [ 'elements' ][ el ] except KeyError : out = ResponseFormatter ( status = falcon . HTTP_NOT_FOUND ) out . message = str ( el ) + \" not found\" response = out . format ( response = response , request = request ) return try : if par is None : parameters = [ f \" { element [ 'code' ] } : { e } \" for e in element [ 'parameters' ] . keys () ] else : parameters = [ f \" { element [ 'code' ] } : { par } \" ] except KeyError as e : out = ResponseFormatter ( status = falcon . HTTP_NOT_FOUND ) out . message = str ( e ) + \" not found\" response = out . format ( response = response , request = request ) return datamap = dict ( parameters = parameters ) if timefrom is not None : datamap [ 'timefrom' ] = timefrom if timeto is not None : datamap [ 'timeto' ] = timeto return tabular_data ( datamap = json . dumps ([ datamap ]), request = request , response = response ) @hug . get ( '/ {el} / {par} ' , output = data_out_handler ) def tabular_data_par ( el = None , par = None , timefrom = None , timeto = None , request = None , response = None ): return tabular_data_el ( el = el , par = par , timefrom = timefrom , timeto = timeto , request = request , response = response ) Variables CSV JSON db nan Functions chkparam def chkparam ( param ) View Source def chkparam ( param ) : el , par = param . split ( \":\" ) try : element = db [ 'elements' ][ el ] except KeyError : raise KeyError ( el ) try : parameter = element [ 'parameters' ][ par ] except KeyError : raise KeyError ( f \"{el}:{par}\" ) return parameter data_out_handler def data_out_handler ( data , request , response ) Supports any of the following formats: Free form UTF-8 text, JSON (Javascript Serialized Object Notation) View Source def output_type ( data , request , response ): handler = requested_output_type ( request ) response . content_type = handler . content_type return handler ( data , request = request , response = response ) tabular_data def tabular_data ( datamap , request = None , response = None ) View Source @hug . get ( '/' , examples = '' , output = data_out_handler ) def tabular_data ( datamap , request = None , response = None ) : if isinstance ( datamap , list ) : datamap = ',' . join ( datamap ) try : loaded = json . loads ( datamap ) except json . JSONDecodeError as e : out = ResponseFormatter ( status = falcon . HTTP_BAD_REQUEST ) out . message = str ( e ) response = out . format ( response = response , request = request ) return parameters = {} for s in loaded : try : timefrom = s [ 'timefrom' ] except KeyError : timefrom = None try : timeto = s [ 'timeto' ] except KeyError : timeto = None for p in s [ 'parameters' ] : if p not in parameters . keys () : parameters [ p ]= [] try : seriescode = chkparam ( p ) except KeyError as e : out = ResponseFormatter ( status = falcon . HTTP_NOT_FOUND ) out . message = str ( e ) + \" not found\" response = out . format ( response = response , request = request ) return parameters [ p ] . append ( Series ( seriescode ). thdata ( timefrom = timefrom , timeto = timeto ) ) out = DataFrame () for param , serieses in parameters . items () : ser = None for r in serieses : s = r . result () if ser is None : ser = s else : ser = ser . append ( s ). sort_index () idx = unique ( ser . index . values , return_index = True ) [ 1 ] ser = ser . iloc [ idx ] ser . columns =[ param ] out = out . join ( ser , how = 'outer' ) out . index . name = 'timestamp' requested = data_out_handler . requested ( request ). content_type if ( requested == CSV ) : return hug . types . text ( out . to_csv ()) if ( requested == JSON ) : return hug . types . json ( out . to_json ( orient = 'table' )) tabular_data_el def tabular_data_el ( el , par = None , timefrom = None , timeto = None , request = None , response = None ) View Source @hug . get ( '/{el}/' , output = data_out_handler ) def tabular_data_el ( el , par = None , timefrom = None , timeto = None , request = None , response = None ) : try : element = db [ 'elements' ][ el ] except KeyError : out = ResponseFormatter ( status = falcon . HTTP_NOT_FOUND ) out . message = str ( el ) + \" not found\" response = out . format ( response = response , request = request ) return try : if par is None : parameters =[ f\"{element['code' ] }:{ e } \" for e in element['parameters'].keys() ] else: parameters=[ f\" { element [ 'code' ] }:{ par } \" ] except KeyError as e: out = ResponseFormatter(status=falcon.HTTP_NOT_FOUND) out.message=str(e) + \" not found \" response = out . format ( response = response , request = request ) return datamap = dict ( parameters = parameters ) if timefrom is not None : datamap [ 'timefrom' ]= timefrom if timeto is not None : datamap [ 'timeto' ]= timeto return tabular_data ( datamap = json . dumps ( [ datamap ] ), request = request , response = response ) tabular_data_par def tabular_data_par ( el = None , par = None , timefrom = None , timeto = None , request = None , response = None ) View Source @hug . get ( '/{el}/{par}' , output = data_out_handler ) def tabular_data_par ( el = None , par = None , timefrom = None , timeto = None , request = None , response = None ) : return tabular_data_el ( el = el , par = par , timefrom = timefrom , timeto = timeto , request = request , response = response )","title":"Api Series"},{"location":"reference/hielen2/api_series/#module-hielen2api_series","text":"View Sourceusr/bin/env python # coding=utf-8 import hug import falcon import json from .utils import hug_output_format_conten_type from numpy import nan , unique from pandas import DataFrame , to_datetime from hielen2 import db from hielen2.series.data_access_layer import Series from himada.api import ResponseFormatter import asyncio data_out_handler = hug_output_format_conten_type ([ hug . output_format . text , hug . output_format . json ]) CSV = \"text/plain; charset=utf-8\" JSON = \"application/json; charset=utf-8\" def chkparam ( param ): el , par = param . split ( \":\" ) try : element = db [ 'elements' ][ el ] except KeyError : raise KeyError ( el ) try : parameter = element [ 'parameters' ][ par ] except KeyError : raise KeyError ( f \" { el } : { par } \" ) return parameter ####### API DATATABLE ####### @hug . get ( '/' , examples = '' , output = data_out_handler ) def tabular_data ( datamap , request = None , response = None ): if isinstance ( datamap , list ): datamap = ',' . join ( datamap ) try : loaded = json . loads ( datamap ) except json . JSONDecodeError as e : out = ResponseFormatter ( status = falcon . HTTP_BAD_REQUEST ) out . message = str ( e ) response = out . format ( response = response , request = request ) return parameters = {} for s in loaded : try : timefrom = s [ 'timefrom' ] except KeyError : timefrom = None try : timeto = s [ 'timeto' ] except KeyError : timeto = None for p in s [ 'parameters' ]: if p not in parameters . keys (): parameters [ p ] = [] try : seriescode = chkparam ( p ) except KeyError as e : out = ResponseFormatter ( status = falcon . HTTP_NOT_FOUND ) out . message = str ( e ) + \" not found\" response = out . format ( response = response , request = request ) return parameters [ p ] . append ( Series ( seriescode ) . thdata ( timefrom = timefrom , timeto = timeto ) ) out = DataFrame () for param , serieses in parameters . items (): ser = None for r in serieses : s = r . result () if ser is None : ser = s else : ser = ser . append ( s ) . sort_index () idx = unique ( ser . index . values , return_index = True )[ 1 ] ser = ser . iloc [ idx ] ser . columns = [ param ] out = out . join ( ser , how = 'outer' ) out . index . name = 'timestamp' requested = data_out_handler . requested ( request ) . content_type if ( requested == CSV ): return hug . types . text ( out . to_csv ()) if ( requested == JSON ): return hug . types . json ( out . to_json ( orient = 'table' )) @hug . get ( '/ {el} /' , output = data_out_handler ) def tabular_data_el ( el , par = None , timefrom = None , timeto = None , request = None , response = None ): try : element = db [ 'elements' ][ el ] except KeyError : out = ResponseFormatter ( status = falcon . HTTP_NOT_FOUND ) out . message = str ( el ) + \" not found\" response = out . format ( response = response , request = request ) return try : if par is None : parameters = [ f \" { element [ 'code' ] } : { e } \" for e in element [ 'parameters' ] . keys () ] else : parameters = [ f \" { element [ 'code' ] } : { par } \" ] except KeyError as e : out = ResponseFormatter ( status = falcon . HTTP_NOT_FOUND ) out . message = str ( e ) + \" not found\" response = out . format ( response = response , request = request ) return datamap = dict ( parameters = parameters ) if timefrom is not None : datamap [ 'timefrom' ] = timefrom if timeto is not None : datamap [ 'timeto' ] = timeto return tabular_data ( datamap = json . dumps ([ datamap ]), request = request , response = response ) @hug . get ( '/ {el} / {par} ' , output = data_out_handler ) def tabular_data_par ( el = None , par = None , timefrom = None , timeto = None , request = None , response = None ): return tabular_data_el ( el = el , par = par , timefrom = timefrom , timeto = timeto , request = request , response = response )","title":"Module hielen2.api_series"},{"location":"reference/hielen2/api_series/#variables","text":"CSV JSON db nan","title":"Variables"},{"location":"reference/hielen2/api_series/#functions","text":"","title":"Functions"},{"location":"reference/hielen2/api_series/#chkparam","text":"def chkparam ( param ) View Source def chkparam ( param ) : el , par = param . split ( \":\" ) try : element = db [ 'elements' ][ el ] except KeyError : raise KeyError ( el ) try : parameter = element [ 'parameters' ][ par ] except KeyError : raise KeyError ( f \"{el}:{par}\" ) return parameter","title":"chkparam"},{"location":"reference/hielen2/api_series/#data_out_handler","text":"def data_out_handler ( data , request , response ) Supports any of the following formats: Free form UTF-8 text, JSON (Javascript Serialized Object Notation) View Source def output_type ( data , request , response ): handler = requested_output_type ( request ) response . content_type = handler . content_type return handler ( data , request = request , response = response )","title":"data_out_handler"},{"location":"reference/hielen2/api_series/#tabular_data","text":"def tabular_data ( datamap , request = None , response = None ) View Source @hug . get ( '/' , examples = '' , output = data_out_handler ) def tabular_data ( datamap , request = None , response = None ) : if isinstance ( datamap , list ) : datamap = ',' . join ( datamap ) try : loaded = json . loads ( datamap ) except json . JSONDecodeError as e : out = ResponseFormatter ( status = falcon . HTTP_BAD_REQUEST ) out . message = str ( e ) response = out . format ( response = response , request = request ) return parameters = {} for s in loaded : try : timefrom = s [ 'timefrom' ] except KeyError : timefrom = None try : timeto = s [ 'timeto' ] except KeyError : timeto = None for p in s [ 'parameters' ] : if p not in parameters . keys () : parameters [ p ]= [] try : seriescode = chkparam ( p ) except KeyError as e : out = ResponseFormatter ( status = falcon . HTTP_NOT_FOUND ) out . message = str ( e ) + \" not found\" response = out . format ( response = response , request = request ) return parameters [ p ] . append ( Series ( seriescode ). thdata ( timefrom = timefrom , timeto = timeto ) ) out = DataFrame () for param , serieses in parameters . items () : ser = None for r in serieses : s = r . result () if ser is None : ser = s else : ser = ser . append ( s ). sort_index () idx = unique ( ser . index . values , return_index = True ) [ 1 ] ser = ser . iloc [ idx ] ser . columns =[ param ] out = out . join ( ser , how = 'outer' ) out . index . name = 'timestamp' requested = data_out_handler . requested ( request ). content_type if ( requested == CSV ) : return hug . types . text ( out . to_csv ()) if ( requested == JSON ) : return hug . types . json ( out . to_json ( orient = 'table' ))","title":"tabular_data"},{"location":"reference/hielen2/api_series/#tabular_data_el","text":"def tabular_data_el ( el , par = None , timefrom = None , timeto = None , request = None , response = None ) View Source @hug . get ( '/{el}/' , output = data_out_handler ) def tabular_data_el ( el , par = None , timefrom = None , timeto = None , request = None , response = None ) : try : element = db [ 'elements' ][ el ] except KeyError : out = ResponseFormatter ( status = falcon . HTTP_NOT_FOUND ) out . message = str ( el ) + \" not found\" response = out . format ( response = response , request = request ) return try : if par is None : parameters =[ f\"{element['code' ] }:{ e } \" for e in element['parameters'].keys() ] else: parameters=[ f\" { element [ 'code' ] }:{ par } \" ] except KeyError as e: out = ResponseFormatter(status=falcon.HTTP_NOT_FOUND) out.message=str(e) + \" not found \" response = out . format ( response = response , request = request ) return datamap = dict ( parameters = parameters ) if timefrom is not None : datamap [ 'timefrom' ]= timefrom if timeto is not None : datamap [ 'timeto' ]= timeto return tabular_data ( datamap = json . dumps ( [ datamap ] ), request = request , response = response )","title":"tabular_data_el"},{"location":"reference/hielen2/api_series/#tabular_data_par","text":"def tabular_data_par ( el = None , par = None , timefrom = None , timeto = None , request = None , response = None ) View Source @hug . get ( '/{el}/{par}' , output = data_out_handler ) def tabular_data_par ( el = None , par = None , timefrom = None , timeto = None , request = None , response = None ) : return tabular_data_el ( el = el , par = par , timefrom = timefrom , timeto = timeto , request = request , response = response )","title":"tabular_data_par"},{"location":"reference/hielen2/datalink/","text":"Module hielen2.datalink View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 #!/usr/bin/env python # coding=utf-8 from pandas import DataFrame , read_json from abc import ABC , abstractmethod from hielen2.utils import loadjsonfile , savejsonfile , newinstanceof def dbinit ( conf ): conf [ 'substs' ] return { k : newinstanceof ( w [ 'klass' ], w [ 'connection' ] . format ( ** conf [ 'substs' ])) for k , w in conf [ 'db' ] . items () } class DB ( ABC ): @abstractmethod def __init__ ( self , connection ): pass @abstractmethod def __getitem__ ( self , key ): pass def save ( self ): pass class JsonDB ( DB ): def __init__ ( self , connection ): self . db = read_json ( connection ) self . filename = connection def __getitem__ ( self , key = None ): if isinstance ( key , list ): try : key = list ( filter ( None , key )) except TypeError : pass if key is None : return self . db . to_dict () return self . db [ key ] . to_dict () def save ( self ): self . db . reset_index () . to_json ( self . filename ) class JsonCache ( DB ): def __init__ ( self , connection ): self . cache = read_json ( connection , convert_dates = False ) . set_index ([ 'code' , 'timestamp' ])[ 'value' ] . sort_index () self . filename = connection def __getitem__ ( self , key ): return self . cache [ key ] ''' try: out = DataFrame(self.cache[key]).set_index(['timestamp']).sort_index() if timefrom is not None and out.index.max() < timefrom: out = out.tail(1) else: out = out.loc[timefrom:timeto] except Exception: pass return out ''' def save ( self ): self . cache . reset_index () . to_json ( self . filename , orient = 'records' ) Functions dbinit def dbinit ( conf ) View Source def dbinit ( conf ): conf [ 'substs' ] return { k : newinstanceof ( w [ 'klass' ], w [ 'connection' ]. format ( ** conf [ 'substs' ])) for k , w in conf [ 'db' ]. items () } Classes DB class DB ( connection ) Helper class that provides a standard way to create an ABC using inheritance. View Source class DB ( ABC ) : @abstractmethod def __init__ ( self , connection ) : pass @abstractmethod def __getitem__ ( self , key ) : pass def save ( self ) : pass Ancestors (in MRO) abc.ABC Descendants hielen2.datalink.JsonDB hielen2.datalink.JsonCache Methods save def save ( self ) View Source def save ( self ): pass JsonCache class JsonCache ( connection ) Helper class that provides a standard way to create an ABC using inheritance. View Source class JsonCache ( DB ) : def __init__ ( self , connection ) : self . cache = read_json ( connection , convert_dates = False ). set_index ( [ 'code','timestamp' ] ) [ 'value' ] . sort_index () self . filename = connection def __getitem__ ( self , key ) : return self . cache [ key ] ''' try: out = DataFrame(self.cache[key]).set_index([' timestamp ']).sort_index() if timefrom is not None and out.index.max() < timefrom: out = out.tail(1) else: out = out.loc[timefrom:timeto] except Exception: pass return out ''' def save ( self ) : self . cache . reset_index (). to_json ( self . filename , orient = 'records' ) Ancestors (in MRO) hielen2.datalink.DB abc.ABC Methods save def save ( self ) View Source def save ( self ): self . cache . reset_index (). to_json ( self . filename , orient = 'records' ) JsonDB class JsonDB ( connection ) Helper class that provides a standard way to create an ABC using inheritance. View Source class JsonDB ( DB ) : def __init__ ( self , connection ) : self . db = read_json ( connection ) self . filename = connection def __getitem__ ( self , key = None ) : if isinstance ( key , list ) : try : key = list ( filter ( None , key )) except TypeError : pass if key is None : return self . db . to_dict () return self . db [ key ] . to_dict () def save ( self ) : self . db . reset_index (). to_json ( self . filename ) Ancestors (in MRO) hielen2.datalink.DB abc.ABC Methods save def save ( self ) View Source def save ( self ): self . db . reset_index (). to_json ( self . filename )","title":"Datalink"},{"location":"reference/hielen2/datalink/#module-hielen2datalink","text":"View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 #!/usr/bin/env python # coding=utf-8 from pandas import DataFrame , read_json from abc import ABC , abstractmethod from hielen2.utils import loadjsonfile , savejsonfile , newinstanceof def dbinit ( conf ): conf [ 'substs' ] return { k : newinstanceof ( w [ 'klass' ], w [ 'connection' ] . format ( ** conf [ 'substs' ])) for k , w in conf [ 'db' ] . items () } class DB ( ABC ): @abstractmethod def __init__ ( self , connection ): pass @abstractmethod def __getitem__ ( self , key ): pass def save ( self ): pass class JsonDB ( DB ): def __init__ ( self , connection ): self . db = read_json ( connection ) self . filename = connection def __getitem__ ( self , key = None ): if isinstance ( key , list ): try : key = list ( filter ( None , key )) except TypeError : pass if key is None : return self . db . to_dict () return self . db [ key ] . to_dict () def save ( self ): self . db . reset_index () . to_json ( self . filename ) class JsonCache ( DB ): def __init__ ( self , connection ): self . cache = read_json ( connection , convert_dates = False ) . set_index ([ 'code' , 'timestamp' ])[ 'value' ] . sort_index () self . filename = connection def __getitem__ ( self , key ): return self . cache [ key ] ''' try: out = DataFrame(self.cache[key]).set_index(['timestamp']).sort_index() if timefrom is not None and out.index.max() < timefrom: out = out.tail(1) else: out = out.loc[timefrom:timeto] except Exception: pass return out ''' def save ( self ): self . cache . reset_index () . to_json ( self . filename , orient = 'records' )","title":"Module hielen2.datalink"},{"location":"reference/hielen2/datalink/#functions","text":"","title":"Functions"},{"location":"reference/hielen2/datalink/#dbinit","text":"def dbinit ( conf ) View Source def dbinit ( conf ): conf [ 'substs' ] return { k : newinstanceof ( w [ 'klass' ], w [ 'connection' ]. format ( ** conf [ 'substs' ])) for k , w in conf [ 'db' ]. items () }","title":"dbinit"},{"location":"reference/hielen2/datalink/#classes","text":"","title":"Classes"},{"location":"reference/hielen2/datalink/#db","text":"class DB ( connection ) Helper class that provides a standard way to create an ABC using inheritance. View Source class DB ( ABC ) : @abstractmethod def __init__ ( self , connection ) : pass @abstractmethod def __getitem__ ( self , key ) : pass def save ( self ) : pass","title":"DB"},{"location":"reference/hielen2/datalink/#ancestors-in-mro","text":"abc.ABC","title":"Ancestors (in MRO)"},{"location":"reference/hielen2/datalink/#descendants","text":"hielen2.datalink.JsonDB hielen2.datalink.JsonCache","title":"Descendants"},{"location":"reference/hielen2/datalink/#methods","text":"","title":"Methods"},{"location":"reference/hielen2/datalink/#save","text":"def save ( self ) View Source def save ( self ): pass","title":"save"},{"location":"reference/hielen2/datalink/#jsoncache","text":"class JsonCache ( connection ) Helper class that provides a standard way to create an ABC using inheritance. View Source class JsonCache ( DB ) : def __init__ ( self , connection ) : self . cache = read_json ( connection , convert_dates = False ). set_index ( [ 'code','timestamp' ] ) [ 'value' ] . sort_index () self . filename = connection def __getitem__ ( self , key ) : return self . cache [ key ] ''' try: out = DataFrame(self.cache[key]).set_index([' timestamp ']).sort_index() if timefrom is not None and out.index.max() < timefrom: out = out.tail(1) else: out = out.loc[timefrom:timeto] except Exception: pass return out ''' def save ( self ) : self . cache . reset_index (). to_json ( self . filename , orient = 'records' )","title":"JsonCache"},{"location":"reference/hielen2/datalink/#ancestors-in-mro_1","text":"hielen2.datalink.DB abc.ABC","title":"Ancestors (in MRO)"},{"location":"reference/hielen2/datalink/#methods_1","text":"","title":"Methods"},{"location":"reference/hielen2/datalink/#save_1","text":"def save ( self ) View Source def save ( self ): self . cache . reset_index (). to_json ( self . filename , orient = 'records' )","title":"save"},{"location":"reference/hielen2/datalink/#jsondb","text":"class JsonDB ( connection ) Helper class that provides a standard way to create an ABC using inheritance. View Source class JsonDB ( DB ) : def __init__ ( self , connection ) : self . db = read_json ( connection ) self . filename = connection def __getitem__ ( self , key = None ) : if isinstance ( key , list ) : try : key = list ( filter ( None , key )) except TypeError : pass if key is None : return self . db . to_dict () return self . db [ key ] . to_dict () def save ( self ) : self . db . reset_index (). to_json ( self . filename )","title":"JsonDB"},{"location":"reference/hielen2/datalink/#ancestors-in-mro_2","text":"hielen2.datalink.DB abc.ABC","title":"Ancestors (in MRO)"},{"location":"reference/hielen2/datalink/#methods_2","text":"","title":"Methods"},{"location":"reference/hielen2/datalink/#save_2","text":"def save ( self ) View Source def save ( self ): self . db . reset_index (). to_json ( self . filename )","title":"save"},{"location":"reference/hielen2/utils/","text":"Module hielen2.utils View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 #!/usr/bin/env python # coding=utf-8 from datetime import datetime from re import split , sub from time import mktime import json from importlib import import_module from falcon import HTTPNotAcceptable def hug_output_format_conten_type ( handlers = [], error = 'The requested format does not match any of those allowed' , ctpar = 'content_type' ): \"\"\"Returns a different handler depending on the input param ctpar If none match and no default is given falcon.HTTPNotAcceptable(error) is raised \"\"\" try : default = handlers [ 0 ] except Exception : default = None handlers = { h . content_type : h for h in handlers } def requested_output_type ( request = None ): try : par = request . _params [ ctpar ] handler = None for k , h in handlers . items (): if par . split ( ';' )[ 0 ] == k . split ( ';' )[ 0 ]: handler = h break except Exception : if default is not None : handler = default if handler is None : raise HTTPNotAcceptable ( error ) return handler def output_type ( data , request , response ): handler = requested_output_type ( request ) response . content_type = handler . content_type return handler ( data , request = request , response = response ) output_type . __doc__ = \"Supports any of the following formats: {0} \" . format ( \", \" . join ( function . __doc__ for function in handlers . values ())) output_type . content_type = \", \" . join ( handlers . keys ()) output_type . requested = requested_output_type return output_type def newinstanceof ( klass , * args , ** kwargs ): klass_ar = klass . split ( '.' ) module = '.' . join ( klass_ar [: - 1 ]) klass = klass_ar [ - 1 ] return getattr ( import_module ( module ), klass )( * args , ** kwargs ) def ut2isot ( u = None ): u = u or 1 return str ( datetime . fromtimestamp ( u )) def isot2ut ( t = None ): t = t or \"1970-01-01T01:00:01.00000Z\" dt = datetime ( * map ( int , split ( '[^\\d]' , sub ( '[^\\d]$' , '' , t )))) return int ( mktime ( dt . timetuple ())) def loadjsonfile ( filename ): with open ( filename ) as jf : return json . load ( jf ) def savejsonfile ( filename , struct ): with open ( filename , 'w' ) as jf : json . dump ( struct , jf ) def eprint ( * args , fname = 'error' , ** kwargs ): with open ( fname , 'a' ) as f : print ( * args , file = f , ** kwargs ) Functions eprint def eprint ( * args , fname = 'error' , ** kwargs ) View Source def eprint ( * args , fname = 'error' , ** kwargs ): with open ( fname , 'a' ) as f : print ( * args , file = f , ** kwargs ) hug_output_format_conten_type def hug_output_format_conten_type ( handlers = [], error = 'The requested format does not match any of those allowed' , ctpar = 'content_type' ) Returns a different handler depending on the input param ctpar If none match and no default is given falcon.HTTPNotAcceptable(error) is raised View Source def hug_output_format_conten_type ( handlers = [] , error = 'The requested format does not match any of those allowed' , ctpar = 'content_type' ) : \"\"\"Returns a different handler depending on the input param ctpar If none match and no default is given falcon.HTTPNotAcceptable(error) is raised \"\"\" try : default = handlers [ 0 ] except Exception : default = None handlers = { h . content_type : h for h in handlers } def requested_output_type ( request = None ) : try : par = request . _params [ ctpar ] handler = None for k , h in handlers . items () : if par . split ( ';' ) [ 0 ] == k . split ( ';' ) [ 0 ] : handler = h break except Exception : if default is not None : handler = default if handler is None : raise HTTPNotAcceptable ( error ) return handler def output_type ( data , request , response ) : handler = requested_output_type ( request ) response . content_type = handler . content_type return handler ( data , request = request , response = response ) output_type . __doc__ = \"Supports any of the following formats: {0}\" . format ( \", \" . join ( function . __doc__ for function in handlers . values ())) output_type . content_type = \", \" . join ( handlers . keys ()) output_type . requested = requested_output_type return output_type isot2ut def isot2ut ( t = None ) View Source def isot2ut ( t = None ): t = t or \"1970-01-01T01:00:01.00000Z\" dt = datetime ( * map ( int , split ( '[^\\d]' , sub ( '[^\\d]$' , '' , t )))) return int ( mktime ( dt . timetuple ())) loadjsonfile def loadjsonfile ( filename ) View Source def loadjsonfile ( filename ): with open ( filename ) as jf : return json . load ( jf ) newinstanceof def newinstanceof ( klass , * args , ** kwargs ) View Source def newinstanceof ( klass , * args , **kwargs ) : klass_ar = klass . split ( '.' ) module='.' . join ( klass_ar [:- 1 ]) klass = klass_ar [ - 1 ] return getattr ( import_module ( module ), klass )( * args , **kwargs ) savejsonfile def savejsonfile ( filename , struct ) View Source def savejsonfile ( filename , struct ): with open ( filename , 'w' ) as jf : json . dump ( struct , jf ) ut2isot def ut2isot ( u = None ) View Source def ut2isot ( u = None ): u = u or 1 return str ( datetime . fromtimestamp ( u ))","title":"Utils"},{"location":"reference/hielen2/utils/#module-hielen2utils","text":"View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 #!/usr/bin/env python # coding=utf-8 from datetime import datetime from re import split , sub from time import mktime import json from importlib import import_module from falcon import HTTPNotAcceptable def hug_output_format_conten_type ( handlers = [], error = 'The requested format does not match any of those allowed' , ctpar = 'content_type' ): \"\"\"Returns a different handler depending on the input param ctpar If none match and no default is given falcon.HTTPNotAcceptable(error) is raised \"\"\" try : default = handlers [ 0 ] except Exception : default = None handlers = { h . content_type : h for h in handlers } def requested_output_type ( request = None ): try : par = request . _params [ ctpar ] handler = None for k , h in handlers . items (): if par . split ( ';' )[ 0 ] == k . split ( ';' )[ 0 ]: handler = h break except Exception : if default is not None : handler = default if handler is None : raise HTTPNotAcceptable ( error ) return handler def output_type ( data , request , response ): handler = requested_output_type ( request ) response . content_type = handler . content_type return handler ( data , request = request , response = response ) output_type . __doc__ = \"Supports any of the following formats: {0} \" . format ( \", \" . join ( function . __doc__ for function in handlers . values ())) output_type . content_type = \", \" . join ( handlers . keys ()) output_type . requested = requested_output_type return output_type def newinstanceof ( klass , * args , ** kwargs ): klass_ar = klass . split ( '.' ) module = '.' . join ( klass_ar [: - 1 ]) klass = klass_ar [ - 1 ] return getattr ( import_module ( module ), klass )( * args , ** kwargs ) def ut2isot ( u = None ): u = u or 1 return str ( datetime . fromtimestamp ( u )) def isot2ut ( t = None ): t = t or \"1970-01-01T01:00:01.00000Z\" dt = datetime ( * map ( int , split ( '[^\\d]' , sub ( '[^\\d]$' , '' , t )))) return int ( mktime ( dt . timetuple ())) def loadjsonfile ( filename ): with open ( filename ) as jf : return json . load ( jf ) def savejsonfile ( filename , struct ): with open ( filename , 'w' ) as jf : json . dump ( struct , jf ) def eprint ( * args , fname = 'error' , ** kwargs ): with open ( fname , 'a' ) as f : print ( * args , file = f , ** kwargs )","title":"Module hielen2.utils"},{"location":"reference/hielen2/utils/#functions","text":"","title":"Functions"},{"location":"reference/hielen2/utils/#eprint","text":"def eprint ( * args , fname = 'error' , ** kwargs ) View Source def eprint ( * args , fname = 'error' , ** kwargs ): with open ( fname , 'a' ) as f : print ( * args , file = f , ** kwargs )","title":"eprint"},{"location":"reference/hielen2/utils/#hug_output_format_conten_type","text":"def hug_output_format_conten_type ( handlers = [], error = 'The requested format does not match any of those allowed' , ctpar = 'content_type' ) Returns a different handler depending on the input param ctpar If none match and no default is given falcon.HTTPNotAcceptable(error) is raised View Source def hug_output_format_conten_type ( handlers = [] , error = 'The requested format does not match any of those allowed' , ctpar = 'content_type' ) : \"\"\"Returns a different handler depending on the input param ctpar If none match and no default is given falcon.HTTPNotAcceptable(error) is raised \"\"\" try : default = handlers [ 0 ] except Exception : default = None handlers = { h . content_type : h for h in handlers } def requested_output_type ( request = None ) : try : par = request . _params [ ctpar ] handler = None for k , h in handlers . items () : if par . split ( ';' ) [ 0 ] == k . split ( ';' ) [ 0 ] : handler = h break except Exception : if default is not None : handler = default if handler is None : raise HTTPNotAcceptable ( error ) return handler def output_type ( data , request , response ) : handler = requested_output_type ( request ) response . content_type = handler . content_type return handler ( data , request = request , response = response ) output_type . __doc__ = \"Supports any of the following formats: {0}\" . format ( \", \" . join ( function . __doc__ for function in handlers . values ())) output_type . content_type = \", \" . join ( handlers . keys ()) output_type . requested = requested_output_type return output_type","title":"hug_output_format_conten_type"},{"location":"reference/hielen2/utils/#isot2ut","text":"def isot2ut ( t = None ) View Source def isot2ut ( t = None ): t = t or \"1970-01-01T01:00:01.00000Z\" dt = datetime ( * map ( int , split ( '[^\\d]' , sub ( '[^\\d]$' , '' , t )))) return int ( mktime ( dt . timetuple ()))","title":"isot2ut"},{"location":"reference/hielen2/utils/#loadjsonfile","text":"def loadjsonfile ( filename ) View Source def loadjsonfile ( filename ): with open ( filename ) as jf : return json . load ( jf )","title":"loadjsonfile"},{"location":"reference/hielen2/utils/#newinstanceof","text":"def newinstanceof ( klass , * args , ** kwargs ) View Source def newinstanceof ( klass , * args , **kwargs ) : klass_ar = klass . split ( '.' ) module='.' . join ( klass_ar [:- 1 ]) klass = klass_ar [ - 1 ] return getattr ( import_module ( module ), klass )( * args , **kwargs )","title":"newinstanceof"},{"location":"reference/hielen2/utils/#savejsonfile","text":"def savejsonfile ( filename , struct ) View Source def savejsonfile ( filename , struct ): with open ( filename , 'w' ) as jf : json . dump ( struct , jf )","title":"savejsonfile"},{"location":"reference/hielen2/utils/#ut2isot","text":"def ut2isot ( u = None ) View Source def ut2isot ( u = None ): u = u or 1 return str ( datetime . fromtimestamp ( u ))","title":"ut2isot"},{"location":"reference/hielen2/series/","text":"Module hielen2.series Sub-modules hielen2.series.calculation hielen2.series.data_access_layer hielen2.series.sources","title":"Index"},{"location":"reference/hielen2/series/#module-hielen2series","text":"","title":"Module hielen2.series"},{"location":"reference/hielen2/series/#sub-modules","text":"hielen2.series.calculation hielen2.series.data_access_layer hielen2.series.sources","title":"Sub-modules"},{"location":"reference/hielen2/series/calculation/","text":"Module hielen2.series.calculation View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 #!/usr/bin/env python # coding=utf-8 __name__ = 'hielen2.series.calculation' __version__ = '0.0.1' __author__ = 'Alessandro Modesti' __email__ = 'it@img-srl.com' __description__ = 'hub for hielen calculations' __license__ = 'MIT' __uri__ = '' from pandas import DataFrame , Series import math import numpy as np #### CUSTOM LIBRARY #### def poly_trans ( S0 , ** kwargs ): def _parse ( k , w ): k = k . replace ( 'E' , '' ) return f ' { w } *S0** { k } ' operator = '+' . join ( _parse ( * x ) for x in kwargs . items () if x [ 0 ][ 0 ] in [ 'E' , 'e' ]) return eval ( operator ) def slope ( S0 , unit , radius ): if unit == '\u00b0' : S0 = S0 [ 0 ] . apply ( lambda x : math . sin ( math . radians ( x ))) return S0 * radius def aligned ( func ): def wrap_align ( left , right ): left = left . copy () right = right . copy () try : left . columns = list ( range ( len ( left . columns ))) except AttributeError : left . name = 0 try : right . columns = list ( range ( len ( right . columns ))) except AttributeError : right . name = 0 left , right = left . align ( right , axis = 0 , copy = False ) mask = left . notna ()[ 0 ] right = right . fillna ( method = 'pad' ) return func ( left [ mask ], right [ mask ]) return wrap_align @aligned def add ( left , right ): right = right . fillna ( 0 ) return left + right @aligned def sub ( left , right ): right = right . fillna ( 0 ) return left - right def filter ( b ): d = abs ( b - b . rolling ( window = 50 , center = True , min_periods = 1 ) . apply ( np . mean )) std = abs ( b . rolling ( window = 50 , center = True , min_periods = 1 ) . apply ( np . std )) return b [ d < 3 * std ] def int_or_str ( value ): try : return int ( value ) except ValueError : return value VERSION = tuple ( map ( int_or_str , __version__ . split ( '.' ))) __all__ = [ 'poly_trans' , 'add' , 'sub' , 'slope' ] Functions add def add ( left , right ) View Source def wrap_align ( left , right ) : left = left . copy () right = right . copy () try : left . columns = list ( range ( len ( left . columns ))) except AttributeError : left . name = 0 try : right . columns = list ( range ( len ( right . columns ))) except AttributeError : right . name = 0 left , right = left . align ( right , axis = 0 , copy = False ) mask = left . notna () [ 0 ] right = right . fillna ( method = 'pad' ) return func ( left [ mask ] , right [ mask ] ) poly_trans def poly_trans ( S0 , ** kwargs ) View Source def poly_trans ( S0 , ** kwargs ): def _parse ( k , w ): k = k . replace ( 'E' , '' ) return f '{w}*S0**{k}' operator = '+' . join ( _parse ( * x ) for x in kwargs . items () if x [ 0 ][ 0 ] in [ 'E' , 'e' ]) return eval ( operator ) slope def slope ( S0 , unit , radius ) View Source def slope ( S0 , unit , radius ): if unit == '\u00b0' : S0 = S0 [ 0 ]. apply ( lambda x : math . sin ( math . radians ( x ))) return S0 * radius sub def sub ( left , right ) View Source def wrap_align ( left , right ) : left = left . copy () right = right . copy () try : left . columns = list ( range ( len ( left . columns ))) except AttributeError : left . name = 0 try : right . columns = list ( range ( len ( right . columns ))) except AttributeError : right . name = 0 left , right = left . align ( right , axis = 0 , copy = False ) mask = left . notna () [ 0 ] right = right . fillna ( method = 'pad' ) return func ( left [ mask ] , right [ mask ] )","title":"Calculation"},{"location":"reference/hielen2/series/calculation/#module-hielen2seriescalculation","text":"View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 #!/usr/bin/env python # coding=utf-8 __name__ = 'hielen2.series.calculation' __version__ = '0.0.1' __author__ = 'Alessandro Modesti' __email__ = 'it@img-srl.com' __description__ = 'hub for hielen calculations' __license__ = 'MIT' __uri__ = '' from pandas import DataFrame , Series import math import numpy as np #### CUSTOM LIBRARY #### def poly_trans ( S0 , ** kwargs ): def _parse ( k , w ): k = k . replace ( 'E' , '' ) return f ' { w } *S0** { k } ' operator = '+' . join ( _parse ( * x ) for x in kwargs . items () if x [ 0 ][ 0 ] in [ 'E' , 'e' ]) return eval ( operator ) def slope ( S0 , unit , radius ): if unit == '\u00b0' : S0 = S0 [ 0 ] . apply ( lambda x : math . sin ( math . radians ( x ))) return S0 * radius def aligned ( func ): def wrap_align ( left , right ): left = left . copy () right = right . copy () try : left . columns = list ( range ( len ( left . columns ))) except AttributeError : left . name = 0 try : right . columns = list ( range ( len ( right . columns ))) except AttributeError : right . name = 0 left , right = left . align ( right , axis = 0 , copy = False ) mask = left . notna ()[ 0 ] right = right . fillna ( method = 'pad' ) return func ( left [ mask ], right [ mask ]) return wrap_align @aligned def add ( left , right ): right = right . fillna ( 0 ) return left + right @aligned def sub ( left , right ): right = right . fillna ( 0 ) return left - right def filter ( b ): d = abs ( b - b . rolling ( window = 50 , center = True , min_periods = 1 ) . apply ( np . mean )) std = abs ( b . rolling ( window = 50 , center = True , min_periods = 1 ) . apply ( np . std )) return b [ d < 3 * std ] def int_or_str ( value ): try : return int ( value ) except ValueError : return value VERSION = tuple ( map ( int_or_str , __version__ . split ( '.' ))) __all__ = [ 'poly_trans' , 'add' , 'sub' , 'slope' ]","title":"Module hielen2.series.calculation"},{"location":"reference/hielen2/series/calculation/#functions","text":"","title":"Functions"},{"location":"reference/hielen2/series/calculation/#add","text":"def add ( left , right ) View Source def wrap_align ( left , right ) : left = left . copy () right = right . copy () try : left . columns = list ( range ( len ( left . columns ))) except AttributeError : left . name = 0 try : right . columns = list ( range ( len ( right . columns ))) except AttributeError : right . name = 0 left , right = left . align ( right , axis = 0 , copy = False ) mask = left . notna () [ 0 ] right = right . fillna ( method = 'pad' ) return func ( left [ mask ] , right [ mask ] )","title":"add"},{"location":"reference/hielen2/series/calculation/#poly_trans","text":"def poly_trans ( S0 , ** kwargs ) View Source def poly_trans ( S0 , ** kwargs ): def _parse ( k , w ): k = k . replace ( 'E' , '' ) return f '{w}*S0**{k}' operator = '+' . join ( _parse ( * x ) for x in kwargs . items () if x [ 0 ][ 0 ] in [ 'E' , 'e' ]) return eval ( operator )","title":"poly_trans"},{"location":"reference/hielen2/series/calculation/#slope","text":"def slope ( S0 , unit , radius ) View Source def slope ( S0 , unit , radius ): if unit == '\u00b0' : S0 = S0 [ 0 ]. apply ( lambda x : math . sin ( math . radians ( x ))) return S0 * radius","title":"slope"},{"location":"reference/hielen2/series/calculation/#sub","text":"def sub ( left , right ) View Source def wrap_align ( left , right ) : left = left . copy () right = right . copy () try : left . columns = list ( range ( len ( left . columns ))) except AttributeError : left . name = 0 try : right . columns = list ( range ( len ( right . columns ))) except AttributeError : right . name = 0 left , right = left . align ( right , axis = 0 , copy = False ) mask = left . notna () [ 0 ] right = right . fillna ( method = 'pad' ) return func ( left [ mask ] , right [ mask ] )","title":"sub"},{"location":"reference/hielen2/series/data_access_layer/","text":"Module hielen2.series.data_access_layer View Sourceusr/bin/env python # coding=utf-8 from pandas import DataFrame from time import time from concurrent.futures import ThreadPoolExecutor from functools import wraps from numpy import nan , unique from importlib import import_module from hielen2 import db from hielen2.utils import isot2ut , ut2isot def _threadpool ( f ): @wraps ( f ) def wrap ( * args , ** kwargs ): return ThreadPoolExecutor () . submit ( f , * args , ** kwargs ) return wrap class Series (): def __init__ ( self , code ): series_info = db [ 'series' ][ code ] self . __dict__ . update ( series_info ) geninfo = dict (( k , w ) for k , w in series_info . items () if k in ( \"modules\" , \"operator\" , \"operands\" ) ) self . generator = Generator ( ** geninfo ) @_threadpool def thdata ( self , timefrom = None , timeto = None , * args , ** kwargs ): return self . data ( timefrom , timeto ) def data ( self , timefrom = None , timeto = None ): if timefrom is not None : if self . first is not None : timefrom = max ( self . first , timefrom ) else : timefrom = self . first if timeto is not None : if self . last is not None : timeto = min ( self . last , timeto ) else : timeto = self . last try : out = db [ 'datacache' ][ self . code ] . to_frame () if timefrom is not None and out . index . max () < timefrom : out = out . tail ( 1 ) else : out = out [ timefrom : timeto ] except KeyError : out = DataFrame () timefrom2 = out . index . max () if timefrom2 is nan : timefrom2 = timefrom else : #timefrom2 = max(isot2ut(timefrom2),isot2ut(timefrom) or 1) timefrom2 = max ( isot2ut ( timefrom2 ), isot2ut ( timefrom ) or 1 ) timefrom2 = ut2isot ( timefrom2 ) gen = self . generator . _generate ( timefrom = timefrom2 , timeto = timeto ) try : gen = gen . to_frame () except AttributeError : pass gen . columns = list ( range ( gen . columns . __len__ ())) out = out . append ( gen ) . sort_index () idx = unique ( out . index . values , return_index = True )[ 1 ] out = out . iloc [ idx ] out . index . name = 'timestamp' return out class Generator : def __init__ ( self , modules = None , operator = None , operands = None ): self . operator = operator or 'DataFrame()' self . modules = {} if not modules is None : for k , m in modules . items (): self . operator = self . operator . replace ( k , f 'self.modules[ { k !r} ]' ) self . modules [ k ] = import_module ( m ) self . operands = {} if operands is not None : self . operands = dict ( Generator . _parse_operand ( * op ) for op in operands . items () ) def _parse_operand ( key , value ): ''' trying to extract a series ''' try : return ( key , Series ( value )) except KeyError : pass ''' trying to extract element attribute ''' try : v = value . split ( '.' ) assert ( v . __len__ () == 2 ) return ( key , db [ 'elements' ][ v [ 0 ]][ v [ 1 ]]) except Exception : pass ''' giving up. It should be a scalar. return it ''' return ( key , value ) def _generate ( self , timefrom , timeto ): operands = dict ( timefrom = timefrom , timeto = timeto ) operands . update ( { k : w for k , w in self . operands . items () if not isinstance ( w , Series ) }) runners = { k : w . thdata ( timefrom , timeto ) for k , w in self . operands . items () if isinstance ( w , Series ) } operands . update ( { k : w . result () for k , w in runners . items () } ) #operands.update( { k:w.data(timefrom,timeto) for k,w in self.operands.items() if isinstance(w,Series) } ) #print('OPERANDI',operands) #print('OPERATORE', self.operator) return eval ( self . operator ) Variables db nan Classes Generator class Generator ( modules = None , operator = None , operands = None ) View Source class Generator : def __init__ ( self , modules = None , operator = None , operands = None ) : self . operator = operator or 'DataFrame()' self . modules = {} if not modules is None : for k , m in modules . items () : self . operator = self . operator . replace ( k , f 'self.modules[{k!r}]' ) self . modules [ k ]= import_module ( m ) self . operands = {} if operands is not None : self . operands = dict ( Generator . _parse_operand ( * op ) for op in operands . items () ) def _parse_operand ( key , value ) : ''' trying to extract a series ''' try : return ( key , Series ( value )) except KeyError : pass ''' trying to extract element attribute ''' try : v = value . split ( '.' ) assert ( v . __len__ () == 2 ) return ( key , db [ 'elements' ][ v[0 ] ] [ v[1 ] ] ) except Exception : pass ''' giving up. It should be a scalar. return it ''' return ( key , value ) def _generate ( self , timefrom , timeto ) : operands = dict ( timefrom = timefrom , timeto = timeto ) operands . update ( { k : w for k , w in self . operands . items () if not isinstance ( w , Series ) } ) runners = { k : w . thdata ( timefrom , timeto ) for k , w in self . operands . items () if isinstance ( w , Series ) } operands . update ( { k : w . result () for k , w in runners . items () } ) #operands . update ( { k : w . data ( timefrom , timeto ) for k , w in self . operands . items () if isinstance ( w , Series ) } ) #print ( 'OPERANDI' , operands ) #print ( 'OPERATORE' , self . operator ) return eval ( self . operator ) Series class Series ( code ) View Source class Series () : def __init__ ( self , code ) : series_info = db [ 'series' ][ code ] self . __dict__ . update ( series_info ) geninfo = dict (( k , w ) for k , w in series_info . items () if k in ( \"modules\" , \"operator\" , \"operands\" ) ) self . generator = Generator ( ** geninfo ) @_threadpool def thdata ( self , timefrom = None , timeto = None , * args , ** kwargs ) : return self . data ( timefrom , timeto ) def data ( self , timefrom = None , timeto = None ) : if timefrom is not None : if self . first is not None : timefrom = max ( self . first , timefrom ) else : timefrom = self . first if timeto is not None : if self . last is not None : timeto = min ( self . last , timeto ) else : timeto = self . last try : out = db [ 'datacache' ][ self.code ] . to_frame () if timefrom is not None and out . index . max () < timefrom : out = out . tail ( 1 ) else : out = out [ timefrom:timeto ] except KeyError : out = DataFrame () timefrom2 = out . index . max () if timefrom2 is nan : timefrom2 = timefrom else : #timefrom2 = max ( isot2ut ( timefrom2 ), isot2ut ( timefrom ) or 1 ) timefrom2 = max ( isot2ut ( timefrom2 ), isot2ut ( timefrom ) or 1 ) timefrom2 = ut2isot ( timefrom2 ) gen = self . generator . _generate ( timefrom = timefrom2 , timeto = timeto ) try : gen = gen . to_frame () except AttributeError : pass gen . columns = list ( range ( gen . columns . __len__ ())) out = out . append ( gen ). sort_index () idx = unique ( out . index . values , return_index = True ) [ 1 ] out = out . iloc [ idx ] out . index . name = 'timestamp' return out Methods data def data ( self , timefrom = None , timeto = None ) View Source def data ( self , timefrom = None , timeto = None ): if timefrom is not None : if self . first is not None : timefrom = max ( self . first , timefrom ) else : timefrom = self . first if timeto is not None : if self . last is not None : timeto = min ( self . last , timeto ) else : timeto = self . last try : out = db [ 'datacache' ][ self . code ]. to_frame () if timefrom is not None and out . index . max () < timefrom : out = out . tail ( 1 ) else : out = out [ timefrom : timeto ] except KeyError : out = DataFrame () timefrom2 = out . index . max () if timefrom2 is nan : timefrom2 = timefrom else : # timefrom2 = max ( isot2ut ( timefrom2 ), isot2ut ( timefrom ) or 1 ) timefrom2 = max ( isot2ut ( timefrom2 ), isot2ut ( timefrom ) or 1 ) timefrom2 = ut2isot ( timefrom2 ) gen = self . generator . _generate ( timefrom = timefrom2 , timeto = timeto ) try : gen = gen . to_frame () except AttributeError : pass gen . columns = list ( range ( gen . columns . __len__ ())) out = out . append ( gen ). sort_index () idx = unique ( out . index . values , return_index = True )[ 1 ] out = out . iloc [ idx ] out . index . name = 'timestamp' return out thdata def thdata ( self , timefrom = None , timeto = None , * args , ** kwargs ) View Source @_threadpool def thdata ( self , timefrom = None , timeto = None , * args , ** kwargs ) : return self . data ( timefrom , timeto )","title":"Data Access Layer"},{"location":"reference/hielen2/series/data_access_layer/#module-hielen2seriesdata_access_layer","text":"View Sourceusr/bin/env python # coding=utf-8 from pandas import DataFrame from time import time from concurrent.futures import ThreadPoolExecutor from functools import wraps from numpy import nan , unique from importlib import import_module from hielen2 import db from hielen2.utils import isot2ut , ut2isot def _threadpool ( f ): @wraps ( f ) def wrap ( * args , ** kwargs ): return ThreadPoolExecutor () . submit ( f , * args , ** kwargs ) return wrap class Series (): def __init__ ( self , code ): series_info = db [ 'series' ][ code ] self . __dict__ . update ( series_info ) geninfo = dict (( k , w ) for k , w in series_info . items () if k in ( \"modules\" , \"operator\" , \"operands\" ) ) self . generator = Generator ( ** geninfo ) @_threadpool def thdata ( self , timefrom = None , timeto = None , * args , ** kwargs ): return self . data ( timefrom , timeto ) def data ( self , timefrom = None , timeto = None ): if timefrom is not None : if self . first is not None : timefrom = max ( self . first , timefrom ) else : timefrom = self . first if timeto is not None : if self . last is not None : timeto = min ( self . last , timeto ) else : timeto = self . last try : out = db [ 'datacache' ][ self . code ] . to_frame () if timefrom is not None and out . index . max () < timefrom : out = out . tail ( 1 ) else : out = out [ timefrom : timeto ] except KeyError : out = DataFrame () timefrom2 = out . index . max () if timefrom2 is nan : timefrom2 = timefrom else : #timefrom2 = max(isot2ut(timefrom2),isot2ut(timefrom) or 1) timefrom2 = max ( isot2ut ( timefrom2 ), isot2ut ( timefrom ) or 1 ) timefrom2 = ut2isot ( timefrom2 ) gen = self . generator . _generate ( timefrom = timefrom2 , timeto = timeto ) try : gen = gen . to_frame () except AttributeError : pass gen . columns = list ( range ( gen . columns . __len__ ())) out = out . append ( gen ) . sort_index () idx = unique ( out . index . values , return_index = True )[ 1 ] out = out . iloc [ idx ] out . index . name = 'timestamp' return out class Generator : def __init__ ( self , modules = None , operator = None , operands = None ): self . operator = operator or 'DataFrame()' self . modules = {} if not modules is None : for k , m in modules . items (): self . operator = self . operator . replace ( k , f 'self.modules[ { k !r} ]' ) self . modules [ k ] = import_module ( m ) self . operands = {} if operands is not None : self . operands = dict ( Generator . _parse_operand ( * op ) for op in operands . items () ) def _parse_operand ( key , value ): ''' trying to extract a series ''' try : return ( key , Series ( value )) except KeyError : pass ''' trying to extract element attribute ''' try : v = value . split ( '.' ) assert ( v . __len__ () == 2 ) return ( key , db [ 'elements' ][ v [ 0 ]][ v [ 1 ]]) except Exception : pass ''' giving up. It should be a scalar. return it ''' return ( key , value ) def _generate ( self , timefrom , timeto ): operands = dict ( timefrom = timefrom , timeto = timeto ) operands . update ( { k : w for k , w in self . operands . items () if not isinstance ( w , Series ) }) runners = { k : w . thdata ( timefrom , timeto ) for k , w in self . operands . items () if isinstance ( w , Series ) } operands . update ( { k : w . result () for k , w in runners . items () } ) #operands.update( { k:w.data(timefrom,timeto) for k,w in self.operands.items() if isinstance(w,Series) } ) #print('OPERANDI',operands) #print('OPERATORE', self.operator) return eval ( self . operator )","title":"Module hielen2.series.data_access_layer"},{"location":"reference/hielen2/series/data_access_layer/#variables","text":"db nan","title":"Variables"},{"location":"reference/hielen2/series/data_access_layer/#classes","text":"","title":"Classes"},{"location":"reference/hielen2/series/data_access_layer/#generator","text":"class Generator ( modules = None , operator = None , operands = None ) View Source class Generator : def __init__ ( self , modules = None , operator = None , operands = None ) : self . operator = operator or 'DataFrame()' self . modules = {} if not modules is None : for k , m in modules . items () : self . operator = self . operator . replace ( k , f 'self.modules[{k!r}]' ) self . modules [ k ]= import_module ( m ) self . operands = {} if operands is not None : self . operands = dict ( Generator . _parse_operand ( * op ) for op in operands . items () ) def _parse_operand ( key , value ) : ''' trying to extract a series ''' try : return ( key , Series ( value )) except KeyError : pass ''' trying to extract element attribute ''' try : v = value . split ( '.' ) assert ( v . __len__ () == 2 ) return ( key , db [ 'elements' ][ v[0 ] ] [ v[1 ] ] ) except Exception : pass ''' giving up. It should be a scalar. return it ''' return ( key , value ) def _generate ( self , timefrom , timeto ) : operands = dict ( timefrom = timefrom , timeto = timeto ) operands . update ( { k : w for k , w in self . operands . items () if not isinstance ( w , Series ) } ) runners = { k : w . thdata ( timefrom , timeto ) for k , w in self . operands . items () if isinstance ( w , Series ) } operands . update ( { k : w . result () for k , w in runners . items () } ) #operands . update ( { k : w . data ( timefrom , timeto ) for k , w in self . operands . items () if isinstance ( w , Series ) } ) #print ( 'OPERANDI' , operands ) #print ( 'OPERATORE' , self . operator ) return eval ( self . operator )","title":"Generator"},{"location":"reference/hielen2/series/data_access_layer/#series","text":"class Series ( code ) View Source class Series () : def __init__ ( self , code ) : series_info = db [ 'series' ][ code ] self . __dict__ . update ( series_info ) geninfo = dict (( k , w ) for k , w in series_info . items () if k in ( \"modules\" , \"operator\" , \"operands\" ) ) self . generator = Generator ( ** geninfo ) @_threadpool def thdata ( self , timefrom = None , timeto = None , * args , ** kwargs ) : return self . data ( timefrom , timeto ) def data ( self , timefrom = None , timeto = None ) : if timefrom is not None : if self . first is not None : timefrom = max ( self . first , timefrom ) else : timefrom = self . first if timeto is not None : if self . last is not None : timeto = min ( self . last , timeto ) else : timeto = self . last try : out = db [ 'datacache' ][ self.code ] . to_frame () if timefrom is not None and out . index . max () < timefrom : out = out . tail ( 1 ) else : out = out [ timefrom:timeto ] except KeyError : out = DataFrame () timefrom2 = out . index . max () if timefrom2 is nan : timefrom2 = timefrom else : #timefrom2 = max ( isot2ut ( timefrom2 ), isot2ut ( timefrom ) or 1 ) timefrom2 = max ( isot2ut ( timefrom2 ), isot2ut ( timefrom ) or 1 ) timefrom2 = ut2isot ( timefrom2 ) gen = self . generator . _generate ( timefrom = timefrom2 , timeto = timeto ) try : gen = gen . to_frame () except AttributeError : pass gen . columns = list ( range ( gen . columns . __len__ ())) out = out . append ( gen ). sort_index () idx = unique ( out . index . values , return_index = True ) [ 1 ] out = out . iloc [ idx ] out . index . name = 'timestamp' return out","title":"Series"},{"location":"reference/hielen2/series/data_access_layer/#methods","text":"","title":"Methods"},{"location":"reference/hielen2/series/data_access_layer/#data","text":"def data ( self , timefrom = None , timeto = None ) View Source def data ( self , timefrom = None , timeto = None ): if timefrom is not None : if self . first is not None : timefrom = max ( self . first , timefrom ) else : timefrom = self . first if timeto is not None : if self . last is not None : timeto = min ( self . last , timeto ) else : timeto = self . last try : out = db [ 'datacache' ][ self . code ]. to_frame () if timefrom is not None and out . index . max () < timefrom : out = out . tail ( 1 ) else : out = out [ timefrom : timeto ] except KeyError : out = DataFrame () timefrom2 = out . index . max () if timefrom2 is nan : timefrom2 = timefrom else : # timefrom2 = max ( isot2ut ( timefrom2 ), isot2ut ( timefrom ) or 1 ) timefrom2 = max ( isot2ut ( timefrom2 ), isot2ut ( timefrom ) or 1 ) timefrom2 = ut2isot ( timefrom2 ) gen = self . generator . _generate ( timefrom = timefrom2 , timeto = timeto ) try : gen = gen . to_frame () except AttributeError : pass gen . columns = list ( range ( gen . columns . __len__ ())) out = out . append ( gen ). sort_index () idx = unique ( out . index . values , return_index = True )[ 1 ] out = out . iloc [ idx ] out . index . name = 'timestamp' return out","title":"data"},{"location":"reference/hielen2/series/data_access_layer/#thdata","text":"def thdata ( self , timefrom = None , timeto = None , * args , ** kwargs ) View Source @_threadpool def thdata ( self , timefrom = None , timeto = None , * args , ** kwargs ) : return self . data ( timefrom , timeto )","title":"thdata"},{"location":"reference/hielen2/series/sources/","text":"Module hielen2.series.sources Sub-modules hielen2.series.sources.csv hielen2.series.sources.smori hielen2.series.sources.winecap","title":"Index"},{"location":"reference/hielen2/series/sources/#module-hielen2seriessources","text":"","title":"Module hielen2.series.sources"},{"location":"reference/hielen2/series/sources/#sub-modules","text":"hielen2.series.sources.csv hielen2.series.sources.smori hielen2.series.sources.winecap","title":"Sub-modules"},{"location":"reference/hielen2/series/sources/csv/","text":"Module hielen2.series.sources.csv View Source # coding: utf-8 from pandas import DataFrame , Series , to_datetime , read_csv import json import requests def get_ch ( path = './incomes' , restype = None , resource = None , filename = 'last_load.csv' , column = None , timefrom = None , timeto = None ): return GWO ( path , restype , filename ) . getDataSeries ( resource = resource , column = column , timefrom = timefrom , timeto = timeto ) class GWO (): def __init__ ( self , path = './incomes' , restype = None , filename = 'last_load.csv' ): self . path = path self . restype = restype self . filename = filename def getDataSeries ( self , resource = None , column = None , timefrom = None , timeto = None ): out = read_csv ( f \"{self.path}/{self.restype}/{resource}/{self.filename}\" , header = None , index_col = [ 0 ])[ column ] #out.index=to_datetime(out.index) out = out . loc [ timefrom : timeto ] return out Functions get_ch def get_ch ( path = './incomes' , restype = None , resource = None , filename = 'last_load.csv' , column = None , timefrom = None , timeto = None ) View Source def get_ch ( path = './incomes' , restype = None , resource = None , filename = 'last_load.csv' , column = None , timefrom = None , timeto = None ): return GWO ( path , restype , filename ). getDataSeries ( resource = resource , column = column , timefrom = timefrom , timeto = timeto ) Classes GWO class GWO ( path = './incomes' , restype = None , filename = 'last_load.csv' ) View Source class GWO () : def __init__ ( self , path = './incomes' , restype = None , filename = 'last_load.csv' ) : self . path = path self . restype = restype self . filename = filename def getDataSeries ( self , resource = None , column = None , timefrom = None , timeto = None ) : out = read_csv ( f \"{self.path}/{self.restype}/{resource}/{self.filename}\" , header = None , index_col =[ 0 ] ) [ column ] #out . index = to_datetime ( out . index ) out = out . loc [ timefrom:timeto ] return out Methods getDataSeries def getDataSeries ( self , resource = None , column = None , timefrom = None , timeto = None ) View Source def getDataSeries ( self , resource = None , column = None , timefrom = None , timeto = None ) : out = read_csv ( f \"{self.path}/{self.restype}/{resource}/{self.filename}\" , header = None , index_col =[ 0 ] ) [ column ] #out . index = to_datetime ( out . index ) out = out . loc [ timefrom:timeto ] return out","title":"Csv"},{"location":"reference/hielen2/series/sources/csv/#module-hielen2seriessourcescsv","text":"View Source # coding: utf-8 from pandas import DataFrame , Series , to_datetime , read_csv import json import requests def get_ch ( path = './incomes' , restype = None , resource = None , filename = 'last_load.csv' , column = None , timefrom = None , timeto = None ): return GWO ( path , restype , filename ) . getDataSeries ( resource = resource , column = column , timefrom = timefrom , timeto = timeto ) class GWO (): def __init__ ( self , path = './incomes' , restype = None , filename = 'last_load.csv' ): self . path = path self . restype = restype self . filename = filename def getDataSeries ( self , resource = None , column = None , timefrom = None , timeto = None ): out = read_csv ( f \"{self.path}/{self.restype}/{resource}/{self.filename}\" , header = None , index_col = [ 0 ])[ column ] #out.index=to_datetime(out.index) out = out . loc [ timefrom : timeto ] return out","title":"Module hielen2.series.sources.csv"},{"location":"reference/hielen2/series/sources/csv/#functions","text":"","title":"Functions"},{"location":"reference/hielen2/series/sources/csv/#get_ch","text":"def get_ch ( path = './incomes' , restype = None , resource = None , filename = 'last_load.csv' , column = None , timefrom = None , timeto = None ) View Source def get_ch ( path = './incomes' , restype = None , resource = None , filename = 'last_load.csv' , column = None , timefrom = None , timeto = None ): return GWO ( path , restype , filename ). getDataSeries ( resource = resource , column = column , timefrom = timefrom , timeto = timeto )","title":"get_ch"},{"location":"reference/hielen2/series/sources/csv/#classes","text":"","title":"Classes"},{"location":"reference/hielen2/series/sources/csv/#gwo","text":"class GWO ( path = './incomes' , restype = None , filename = 'last_load.csv' ) View Source class GWO () : def __init__ ( self , path = './incomes' , restype = None , filename = 'last_load.csv' ) : self . path = path self . restype = restype self . filename = filename def getDataSeries ( self , resource = None , column = None , timefrom = None , timeto = None ) : out = read_csv ( f \"{self.path}/{self.restype}/{resource}/{self.filename}\" , header = None , index_col =[ 0 ] ) [ column ] #out . index = to_datetime ( out . index ) out = out . loc [ timefrom:timeto ] return out","title":"GWO"},{"location":"reference/hielen2/series/sources/csv/#methods","text":"","title":"Methods"},{"location":"reference/hielen2/series/sources/csv/#getdataseries","text":"def getDataSeries ( self , resource = None , column = None , timefrom = None , timeto = None ) View Source def getDataSeries ( self , resource = None , column = None , timefrom = None , timeto = None ) : out = read_csv ( f \"{self.path}/{self.restype}/{resource}/{self.filename}\" , header = None , index_col =[ 0 ] ) [ column ] #out . index = to_datetime ( out . index ) out = out . loc [ timefrom:timeto ] return out","title":"getDataSeries"},{"location":"reference/hielen2/series/sources/smori/","text":"Module hielen2.series.sources.smori View Source # coding: utf-8 from pandas import DataFrame , Series , to_datetime import json import requests def get_ch ( sito = None , id_stazione = None , id_unita = None , id_sensore = None , aggr = 'avg' , timefrom = None , timeto = None ): return GWO () . getDataSeries ( sito = sito , stazione = id_stazione , unita = id_unita , sensore = id_sensore , aggr = 'avg' , timefrom = timefrom , timeto = timeto ) class GWO (): def __init__ ( self , uri = 'https://www.smori.it/tisma/api/v1/sensor_data.php' ): self . uri = uri def getDataSeries ( self , sito = None , stazione = None , unita = None , sensore = None , aggr = 'avg' , timefrom = None , timeto = None ): params = dict ( sito = sito , stazione = stazione , unita = unita , sensore = sensore , ) if aggr is not None : params [ 'aggr' ] = aggr if timefrom is not None : params [ 'dal' ] = timefrom if timefrom is not None : params [ 'al' ] = timeto r = requests . get ( url = self . uri , params = params ) out = DataFrame ( json . loads ( r . text )[ 'data' ]) #print (r.url) if out . empty : return out out = out . set_index ([ 'timestamp' ])[ 'valore' ] out = out . astype ( float , copy = False , errors = 'ignore' ) out . name = f \"{stazione}_{unita}_{sensore}\" out . index = to_datetime ( out . index ) return out Functions get_ch def get_ch ( sito = None , id_stazione = None , id_unita = None , id_sensore = None , aggr = 'avg' , timefrom = None , timeto = None ) View Source def get_ch ( sito = None , id_stazione = None , id_unita = None , id_sensore = None , aggr = 'avg' , timefrom = None , timeto = None ): return GWO (). getDataSeries ( sito = sito , stazione = id_stazione , unita = id_unita , sensore = id_sensore , aggr = 'avg' , timefrom = timefrom , timeto = timeto ) Classes GWO class GWO ( uri = 'https://www.smori.it/tisma/api/v1/sensor_data.php' ) View Source class GWO (): def __init__ ( self , uri = 'https://www.smori.it/tisma/api/v1/sensor_data.php' ): self . uri = uri def getDataSeries ( self , sito = None , stazione = None , unita = None , sensore = None , aggr = 'avg' , timefrom = None , timeto = None ): params = dict ( sito = sito , stazione = stazione , unita = unita , sensore = sensore , ) if aggr is not None: params [ 'aggr' ]= aggr if timefrom is not None: params [ 'dal' ]= timefrom if timefrom is not None: params [ 'al' ]= timeto r = requests . get ( url = self . uri , params = params ) out = DataFrame ( json . loads ( r . text )[ 'data' ]) #print (r.url) if out . empty: return out out = out . set_index ([ 'timestamp' ])[ 'valore' ] out = out . astype ( float , copy = False , errors = 'ignore' ) out . name = f \"{stazione}_{unita}_{sensore}\" out . index = to_datetime ( out . index ) return out Methods getDataSeries def getDataSeries ( self , sito = None , stazione = None , unita = None , sensore = None , aggr = 'avg' , timefrom = None , timeto = None ) View Source def getDataSeries ( self , sito = None , stazione = None , unita = None , sensore = None , aggr = 'avg' , timefrom = None , timeto = None ): params = dict ( sito = sito , stazione = stazione , unita = unita , sensore = sensore , ) if aggr is not None : params [ 'aggr' ] = aggr if timefrom is not None : params [ 'dal' ] = timefrom if timefrom is not None : params [ 'al' ] = timeto r = requests . get ( url = self . uri , params = params ) out = DataFrame ( json . loads ( r . text )[ 'data' ]) # print ( r . url ) if out . empty : return out out = out . set_index ([ 'timestamp' ])[ 'valore' ] out = out . astype ( float , copy = False , errors = 'ignore' ) out . name = f \"{stazione}_{unita}_{sensore}\" out . index = to_datetime ( out . index ) return out","title":"Smori"},{"location":"reference/hielen2/series/sources/smori/#module-hielen2seriessourcessmori","text":"View Source # coding: utf-8 from pandas import DataFrame , Series , to_datetime import json import requests def get_ch ( sito = None , id_stazione = None , id_unita = None , id_sensore = None , aggr = 'avg' , timefrom = None , timeto = None ): return GWO () . getDataSeries ( sito = sito , stazione = id_stazione , unita = id_unita , sensore = id_sensore , aggr = 'avg' , timefrom = timefrom , timeto = timeto ) class GWO (): def __init__ ( self , uri = 'https://www.smori.it/tisma/api/v1/sensor_data.php' ): self . uri = uri def getDataSeries ( self , sito = None , stazione = None , unita = None , sensore = None , aggr = 'avg' , timefrom = None , timeto = None ): params = dict ( sito = sito , stazione = stazione , unita = unita , sensore = sensore , ) if aggr is not None : params [ 'aggr' ] = aggr if timefrom is not None : params [ 'dal' ] = timefrom if timefrom is not None : params [ 'al' ] = timeto r = requests . get ( url = self . uri , params = params ) out = DataFrame ( json . loads ( r . text )[ 'data' ]) #print (r.url) if out . empty : return out out = out . set_index ([ 'timestamp' ])[ 'valore' ] out = out . astype ( float , copy = False , errors = 'ignore' ) out . name = f \"{stazione}_{unita}_{sensore}\" out . index = to_datetime ( out . index ) return out","title":"Module hielen2.series.sources.smori"},{"location":"reference/hielen2/series/sources/smori/#functions","text":"","title":"Functions"},{"location":"reference/hielen2/series/sources/smori/#get_ch","text":"def get_ch ( sito = None , id_stazione = None , id_unita = None , id_sensore = None , aggr = 'avg' , timefrom = None , timeto = None ) View Source def get_ch ( sito = None , id_stazione = None , id_unita = None , id_sensore = None , aggr = 'avg' , timefrom = None , timeto = None ): return GWO (). getDataSeries ( sito = sito , stazione = id_stazione , unita = id_unita , sensore = id_sensore , aggr = 'avg' , timefrom = timefrom , timeto = timeto )","title":"get_ch"},{"location":"reference/hielen2/series/sources/smori/#classes","text":"","title":"Classes"},{"location":"reference/hielen2/series/sources/smori/#gwo","text":"class GWO ( uri = 'https://www.smori.it/tisma/api/v1/sensor_data.php' ) View Source class GWO (): def __init__ ( self , uri = 'https://www.smori.it/tisma/api/v1/sensor_data.php' ): self . uri = uri def getDataSeries ( self , sito = None , stazione = None , unita = None , sensore = None , aggr = 'avg' , timefrom = None , timeto = None ): params = dict ( sito = sito , stazione = stazione , unita = unita , sensore = sensore , ) if aggr is not None: params [ 'aggr' ]= aggr if timefrom is not None: params [ 'dal' ]= timefrom if timefrom is not None: params [ 'al' ]= timeto r = requests . get ( url = self . uri , params = params ) out = DataFrame ( json . loads ( r . text )[ 'data' ]) #print (r.url) if out . empty: return out out = out . set_index ([ 'timestamp' ])[ 'valore' ] out = out . astype ( float , copy = False , errors = 'ignore' ) out . name = f \"{stazione}_{unita}_{sensore}\" out . index = to_datetime ( out . index ) return out","title":"GWO"},{"location":"reference/hielen2/series/sources/smori/#methods","text":"","title":"Methods"},{"location":"reference/hielen2/series/sources/smori/#getdataseries","text":"def getDataSeries ( self , sito = None , stazione = None , unita = None , sensore = None , aggr = 'avg' , timefrom = None , timeto = None ) View Source def getDataSeries ( self , sito = None , stazione = None , unita = None , sensore = None , aggr = 'avg' , timefrom = None , timeto = None ): params = dict ( sito = sito , stazione = stazione , unita = unita , sensore = sensore , ) if aggr is not None : params [ 'aggr' ] = aggr if timefrom is not None : params [ 'dal' ] = timefrom if timefrom is not None : params [ 'al' ] = timeto r = requests . get ( url = self . uri , params = params ) out = DataFrame ( json . loads ( r . text )[ 'data' ]) # print ( r . url ) if out . empty : return out out = out . set_index ([ 'timestamp' ])[ 'valore' ] out = out . astype ( float , copy = False , errors = 'ignore' ) out . name = f \"{stazione}_{unita}_{sensore}\" out . index = to_datetime ( out . index ) return out","title":"getDataSeries"},{"location":"reference/hielen2/series/sources/winecap/","text":"Module hielen2.series.sources.winecap View Source # coding: utf-8 from pandas import DataFrame , Series , to_datetime from zeep import Client from zeep.helpers import serialize_object from concurrent.futures import ThreadPoolExecutor from functools import wraps from time import time from hielen.utils import isot2ut ''' sudo apt-get install libxml2-dev libxslt1-dev pip install lxml==4.2.5 zeep ''' #key='80d373db820fea6f8c5f57d125eb509d' key = '04a71268d386d61801824863ad7e2a5d' GWOmac = '00009DEA' def get_ch ( GW = None , LG = None , CH = None , timefrom = None , timeto = None ): return GWO ( mac = GW ) . getDataSeries ( mac = LG , ch = CH , timefrom = timefrom , timeto = timeto ) def threadpool ( f , executor = None ): @wraps ( f ) def wrap ( * args , ** kwargs ): return ThreadPoolExecutor () . submit ( f , * args , ** kwargs ) return wrap class GWO (): def __init__ ( self , key = key , mac = GWOmac , wsdl = 'http://www.winecap.it/winecapws.wsdl' ): self . key = key self . mac = mac self . client = Client ( wsdl = wsdl ) self . _gch = self . client . service . getChannelHistory self . _gsh = self . client . service . getSystemHistory self . _gsl = self . client . service . getSensorList def getSensorsList ( self ): return DataFrame ( serialize_object ( self . _gsl ( self . key , self . mac ))) def getDataSeries ( self , mac , ch , timefrom = None , timeto = None ): if not isinstance ( timefrom , int ): timefrom = isot2ut ( timefrom ) if timeto is None : timeto = int ( time ()) if not isinstance ( timeto , int ): timeto = isot2ut ( timeto ) ahead = True out = Series () while ahead : u = DataFrame ( serialize_object ( self . _gch ( self . key , self . mac , mac , ch , timefrom , timeto ))) if u . __len__ () < 1024 : ahead = False if u . __len__ () > 0 : u = u . set_index ([ 'timeStamp' ])[ 'value' ] u . index . names = [ 'timestamp' ] timefrom = u . index . max () + 1 out = out . append ( u ) out = out . sort_index () out . name = f \"{mac}_{ch}\" out . sort_index () out . index = to_datetime ( out . index , unit = 's' ) return out @threadpool def getThreadedSeries ( self , * args , ** kwargs ): return self . getDataSeries ( * args , ** kwargs ) def getDataFrame ( self , reqser = [], timefrom = None , timeto = None ): thds = [ self . getThreadedSeries ( * x , timefrom , timeto ) for x in reqser ] return [ x . result () for x in thds ] def getDataFrameSE ( self , reqser = [], timefrom = None , timeto = None ): return [ self . getDataSeries ( * x , timefrom , timeto ) for x in reqser ] Variables GWOmac key Functions get_ch def get_ch ( GW = None , LG = None , CH = None , timefrom = None , timeto = None ) View Source def get_ch ( GW = None , LG = None , CH = None , timefrom = None , timeto = None ): return GWO ( mac = GW ). getDataSeries ( mac = LG , ch = CH , timefrom = timefrom , timeto = timeto ) threadpool def threadpool ( f , executor = None ) View Source def threadpool ( f , executor = None ) : @wraps ( f ) def wrap ( * args , ** kwargs ) : return ThreadPoolExecutor (). submit ( f , * args , ** kwargs ) return wrap Classes GWO class GWO ( key = '04a71268d386d61801824863ad7e2a5d' , mac = '00009DEA' , wsdl = 'http://www.winecap.it/winecapws.wsdl' ) View Source class GWO () : def __init__ ( self , key = key , mac = GWOmac , wsdl = 'http://www.winecap.it/winecapws.wsdl' ) : self . key = key self . mac = mac self . client = Client ( wsdl = wsdl ) self . _gch = self . client . service . getChannelHistory self . _gsh = self . client . service . getSystemHistory self . _gsl = self . client . service . getSensorList def getSensorsList ( self ) : return DataFrame ( serialize_object ( self . _gsl ( self . key , self . mac ))) def getDataSeries ( self , mac , ch , timefrom = None , timeto = None ) : if not isinstance ( timefrom , int ) : timefrom = isot2ut ( timefrom ) if timeto is None : timeto = int ( time ()) if not isinstance ( timeto , int ) : timeto = isot2ut ( timeto ) ahead = True out = Series () while ahead : u = DataFrame ( serialize_object ( self . _gch ( self . key , self . mac , mac , ch , timefrom , timeto ))) if u . __len__ () < 1024 : ahead = False if u . __len__ () > 0 : u = u . set_index ( [ 'timeStamp' ] ) [ 'value' ] u . index . names =[ 'timestamp' ] timefrom = u . index . max () + 1 out = out . append ( u ) out = out . sort_index () out . name = f \"{mac}_{ch}\" out . sort_index () out . index = to_datetime ( out . index , unit = 's' ) return out @threadpool def getThreadedSeries ( self , * args , ** kwargs ) : return self . getDataSeries ( * args , ** kwargs ) def getDataFrame ( self , reqser = [] , timefrom = None , timeto = None ) : thds =[ self.getThreadedSeries(*x,timefrom,timeto) for x in reqser ] return [ x.result() for x in thds ] def getDataFrameSE ( self , reqser = [] , timefrom = None , timeto = None ) : return [ self.getDataSeries(*x,timefrom,timeto) for x in reqser ] Methods getDataFrame def getDataFrame ( self , reqser = [], timefrom = None , timeto = None ) View Source def getDataFrame ( self , reqser = [], timefrom = None , timeto = None ): thds = [ self . getThreadedSeries ( * x , timefrom , timeto ) for x in reqser ] return [ x . result () for x in thds ] getDataFrameSE def getDataFrameSE ( self , reqser = [], timefrom = None , timeto = None ) View Source def getDataFrameSE ( self , reqser = [], timefrom = None , timeto = None ): return [ self . getDataSeries ( * x , timefrom , timeto ) for x in reqser ] getDataSeries def getDataSeries ( self , mac , ch , timefrom = None , timeto = None ) View Source def getDataSeries ( self , mac , ch , timefrom = None , timeto = None ): if not isinstance ( timefrom , int ): timefrom = isot2ut ( timefrom ) if timeto is None : timeto = int ( time ()) if not isinstance ( timeto , int ): timeto = isot2ut ( timeto ) ahead = True out = Series () while ahead : u = DataFrame ( serialize_object ( self . _gch ( self . key , self . mac , mac , ch , timefrom , timeto ))) if u . __len__ () < 1024 : ahead = False if u . __len__ () > 0 : u = u . set_index ([ 'timeStamp' ])[ 'value' ] u . index . names = [ 'timestamp' ] timefrom = u . index . max () + 1 out = out . append ( u ) out = out . sort_index () out . name = f \"{mac}_{ch}\" out . sort_index () out . index = to_datetime ( out . index , unit = 's' ) return out getSensorsList def getSensorsList ( self ) View Source def getSensorsList ( self ): return DataFrame ( serialize_object ( self . _gsl ( self . key , self . mac ))) getThreadedSeries def getThreadedSeries ( self , * args , ** kwargs ) View Source @threadpool def getThreadedSeries ( self , * args , ** kwargs ) : return self . getDataSeries ( * args , ** kwargs )","title":"Winecap"},{"location":"reference/hielen2/series/sources/winecap/#module-hielen2seriessourceswinecap","text":"View Source # coding: utf-8 from pandas import DataFrame , Series , to_datetime from zeep import Client from zeep.helpers import serialize_object from concurrent.futures import ThreadPoolExecutor from functools import wraps from time import time from hielen.utils import isot2ut ''' sudo apt-get install libxml2-dev libxslt1-dev pip install lxml==4.2.5 zeep ''' #key='80d373db820fea6f8c5f57d125eb509d' key = '04a71268d386d61801824863ad7e2a5d' GWOmac = '00009DEA' def get_ch ( GW = None , LG = None , CH = None , timefrom = None , timeto = None ): return GWO ( mac = GW ) . getDataSeries ( mac = LG , ch = CH , timefrom = timefrom , timeto = timeto ) def threadpool ( f , executor = None ): @wraps ( f ) def wrap ( * args , ** kwargs ): return ThreadPoolExecutor () . submit ( f , * args , ** kwargs ) return wrap class GWO (): def __init__ ( self , key = key , mac = GWOmac , wsdl = 'http://www.winecap.it/winecapws.wsdl' ): self . key = key self . mac = mac self . client = Client ( wsdl = wsdl ) self . _gch = self . client . service . getChannelHistory self . _gsh = self . client . service . getSystemHistory self . _gsl = self . client . service . getSensorList def getSensorsList ( self ): return DataFrame ( serialize_object ( self . _gsl ( self . key , self . mac ))) def getDataSeries ( self , mac , ch , timefrom = None , timeto = None ): if not isinstance ( timefrom , int ): timefrom = isot2ut ( timefrom ) if timeto is None : timeto = int ( time ()) if not isinstance ( timeto , int ): timeto = isot2ut ( timeto ) ahead = True out = Series () while ahead : u = DataFrame ( serialize_object ( self . _gch ( self . key , self . mac , mac , ch , timefrom , timeto ))) if u . __len__ () < 1024 : ahead = False if u . __len__ () > 0 : u = u . set_index ([ 'timeStamp' ])[ 'value' ] u . index . names = [ 'timestamp' ] timefrom = u . index . max () + 1 out = out . append ( u ) out = out . sort_index () out . name = f \"{mac}_{ch}\" out . sort_index () out . index = to_datetime ( out . index , unit = 's' ) return out @threadpool def getThreadedSeries ( self , * args , ** kwargs ): return self . getDataSeries ( * args , ** kwargs ) def getDataFrame ( self , reqser = [], timefrom = None , timeto = None ): thds = [ self . getThreadedSeries ( * x , timefrom , timeto ) for x in reqser ] return [ x . result () for x in thds ] def getDataFrameSE ( self , reqser = [], timefrom = None , timeto = None ): return [ self . getDataSeries ( * x , timefrom , timeto ) for x in reqser ]","title":"Module hielen2.series.sources.winecap"},{"location":"reference/hielen2/series/sources/winecap/#variables","text":"GWOmac key","title":"Variables"},{"location":"reference/hielen2/series/sources/winecap/#functions","text":"","title":"Functions"},{"location":"reference/hielen2/series/sources/winecap/#get_ch","text":"def get_ch ( GW = None , LG = None , CH = None , timefrom = None , timeto = None ) View Source def get_ch ( GW = None , LG = None , CH = None , timefrom = None , timeto = None ): return GWO ( mac = GW ). getDataSeries ( mac = LG , ch = CH , timefrom = timefrom , timeto = timeto )","title":"get_ch"},{"location":"reference/hielen2/series/sources/winecap/#threadpool","text":"def threadpool ( f , executor = None ) View Source def threadpool ( f , executor = None ) : @wraps ( f ) def wrap ( * args , ** kwargs ) : return ThreadPoolExecutor (). submit ( f , * args , ** kwargs ) return wrap","title":"threadpool"},{"location":"reference/hielen2/series/sources/winecap/#classes","text":"","title":"Classes"},{"location":"reference/hielen2/series/sources/winecap/#gwo","text":"class GWO ( key = '04a71268d386d61801824863ad7e2a5d' , mac = '00009DEA' , wsdl = 'http://www.winecap.it/winecapws.wsdl' ) View Source class GWO () : def __init__ ( self , key = key , mac = GWOmac , wsdl = 'http://www.winecap.it/winecapws.wsdl' ) : self . key = key self . mac = mac self . client = Client ( wsdl = wsdl ) self . _gch = self . client . service . getChannelHistory self . _gsh = self . client . service . getSystemHistory self . _gsl = self . client . service . getSensorList def getSensorsList ( self ) : return DataFrame ( serialize_object ( self . _gsl ( self . key , self . mac ))) def getDataSeries ( self , mac , ch , timefrom = None , timeto = None ) : if not isinstance ( timefrom , int ) : timefrom = isot2ut ( timefrom ) if timeto is None : timeto = int ( time ()) if not isinstance ( timeto , int ) : timeto = isot2ut ( timeto ) ahead = True out = Series () while ahead : u = DataFrame ( serialize_object ( self . _gch ( self . key , self . mac , mac , ch , timefrom , timeto ))) if u . __len__ () < 1024 : ahead = False if u . __len__ () > 0 : u = u . set_index ( [ 'timeStamp' ] ) [ 'value' ] u . index . names =[ 'timestamp' ] timefrom = u . index . max () + 1 out = out . append ( u ) out = out . sort_index () out . name = f \"{mac}_{ch}\" out . sort_index () out . index = to_datetime ( out . index , unit = 's' ) return out @threadpool def getThreadedSeries ( self , * args , ** kwargs ) : return self . getDataSeries ( * args , ** kwargs ) def getDataFrame ( self , reqser = [] , timefrom = None , timeto = None ) : thds =[ self.getThreadedSeries(*x,timefrom,timeto) for x in reqser ] return [ x.result() for x in thds ] def getDataFrameSE ( self , reqser = [] , timefrom = None , timeto = None ) : return [ self.getDataSeries(*x,timefrom,timeto) for x in reqser ]","title":"GWO"},{"location":"reference/hielen2/series/sources/winecap/#methods","text":"","title":"Methods"},{"location":"reference/hielen2/series/sources/winecap/#getdataframe","text":"def getDataFrame ( self , reqser = [], timefrom = None , timeto = None ) View Source def getDataFrame ( self , reqser = [], timefrom = None , timeto = None ): thds = [ self . getThreadedSeries ( * x , timefrom , timeto ) for x in reqser ] return [ x . result () for x in thds ]","title":"getDataFrame"},{"location":"reference/hielen2/series/sources/winecap/#getdataframese","text":"def getDataFrameSE ( self , reqser = [], timefrom = None , timeto = None ) View Source def getDataFrameSE ( self , reqser = [], timefrom = None , timeto = None ): return [ self . getDataSeries ( * x , timefrom , timeto ) for x in reqser ]","title":"getDataFrameSE"},{"location":"reference/hielen2/series/sources/winecap/#getdataseries","text":"def getDataSeries ( self , mac , ch , timefrom = None , timeto = None ) View Source def getDataSeries ( self , mac , ch , timefrom = None , timeto = None ): if not isinstance ( timefrom , int ): timefrom = isot2ut ( timefrom ) if timeto is None : timeto = int ( time ()) if not isinstance ( timeto , int ): timeto = isot2ut ( timeto ) ahead = True out = Series () while ahead : u = DataFrame ( serialize_object ( self . _gch ( self . key , self . mac , mac , ch , timefrom , timeto ))) if u . __len__ () < 1024 : ahead = False if u . __len__ () > 0 : u = u . set_index ([ 'timeStamp' ])[ 'value' ] u . index . names = [ 'timestamp' ] timefrom = u . index . max () + 1 out = out . append ( u ) out = out . sort_index () out . name = f \"{mac}_{ch}\" out . sort_index () out . index = to_datetime ( out . index , unit = 's' ) return out","title":"getDataSeries"},{"location":"reference/hielen2/series/sources/winecap/#getsensorslist","text":"def getSensorsList ( self ) View Source def getSensorsList ( self ): return DataFrame ( serialize_object ( self . _gsl ( self . key , self . mac )))","title":"getSensorsList"},{"location":"reference/hielen2/series/sources/winecap/#getthreadedseries","text":"def getThreadedSeries ( self , * args , ** kwargs ) View Source @threadpool def getThreadedSeries ( self , * args , ** kwargs ) : return self . getDataSeries ( * args , ** kwargs )","title":"getThreadedSeries"}]}